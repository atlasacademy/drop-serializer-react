{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/query.js","redux/thunks/select.js","redux/thunks/submission.js","redux/thunks/load.js","components/Message/Message.js","components/Message/PendingSubmissions.js","components/Message/Messages.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Button/ToggleFilterButton.js","components/Button/SubmitButton.js","components/Button/SheetButton.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["pushMessage","type","message","payload","setEvent","setEventData","setShowSettings","setSubmissionPending","updateLoading","setQuery","eventUid","nodeUid","dispatch","getState","dropSerializer","enableQueryParameters","location","window","params","URLSearchParams","search","set","delete","newUrl","protocol","host","pathname","toString","history","replaceState","path","selectEvent","uid","eventData","Promise","resolve","then","fetchEvent","selectNode","selectedEvent","sendNext","submissionQueue","submissionPending","length","submission","submit","event_uid","domain","axios","post","response","data","receipt","reloadOutdatedEventData","missing_drops","catch","error","status","setTimeout","submissionEventUid","missingDrops","selectedNode","fetchEvents","enableEventSelector","get","Message","React","Component","componentDidMount","this","props","render","variant","connect","PendingSubmissions","pendingCount","state","undefined","Messages","className","messages","map","key","mapStateToProps","ownProps","property","value","settings","mapDispatchToProps","update","updateSetting","reduxConnect","_SettingFieldReduxConnector","Group","controlId","Label","Control","as","onChange","e","target","disabled","navigator","vibrate","showSettings","hide","show","toggle","_SettingsReduxConnector","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Click","Vibrate","onClick","icon","nodeDrop","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","showFilters","submissionDrops","drop","drops","filter","shift","quantityDisplay","quantity","submissionDrop","count","ignored","updateDrop","DropCount","size","parseInt","isNaN","_DropReduxConnector","Howl","src","_DropIncrementor","constructor","incrementorSettings","super","defaultSettings","delay","iteratorSkip","max","min","step","windowLeash","interval","iterator","running","windowPosition","windowListener","componentWillUnmount","stopInterval","onMouseDown","startInterval","onMouseMove","onMouseOut","onMouseUp","stepCount","onWindowScroll","Math","abs","scrollY","parent","animate","click","play","setInterval","tick","addEventListener","setState","clearInterval","removeEventListener","dropState","_DropIncrementorReduxConnector","block","tabIndex","draggable","image","alt","name","DropToggle","DropIndicator","isSelected","difference","indicator","Drop","animating","columns","DropBonusCount","Array","keys","i","DropBonus","DropContainer","makeNodeDropKey","event_node_uid","nodeDrops","node_drops","EventSelector","updateEvent","concat","eventList","event","NodeSelector","updateNode","nodeList","node","nodes","ToggleFilterButton","SubmitButton","timeout","clearTimeout","dropCount","submitterName","submitter_name","submitter","token","uuidv1","reduce","a","b","SheetButton","eventLoaded","href","sheetLink","rel","Boolean","sheet_id","DropSerializer","options","messageKey","nodeSave","has","init","id","width","eventsLoaded","nodeSelected","isLoading","spin","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","storedSettings","push","setItem","stringify","slice","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","modules","reducerMap","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFileExcel","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.351e5046.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import axios from \"axios\";\nimport uuidv1 from \"uuid/v1\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\nimport {selectEvent, selectNode} from \"./select\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops,\n            token: uuidv1()\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {event_uid} = submission;\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(reloadOutdatedEventData(event_uid, response.data.missing_drops)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n\nexport const reloadOutdatedEventData = (submissionEventUid, missingDrops) => {\n    return (dispatch, getState) => {\n        const {selectedEvent, selectedNode} = getState().dropSerializer;\n\n        // Event data isn't outdated\n        if (!missingDrops) {\n            return Promise.resolve();\n        }\n\n        // Outdated event isn't the current selected event. They will refresh if they select again so do not force\n        // a refresh\n        if (submissionEventUid !== selectedEvent) {\n            return Promise.resolve();\n        }\n\n        // Event data is outdated. Refresh the data\n        return Promise.resolve()\n                      .then(() => dispatch(pushMessage(\n                          \"info\",\n                          \"Event data is outdated. Refreshing now ...\"\n                      )))\n                      .then(() => dispatch(selectEvent('')))\n                      .then(() => dispatch(selectEvent(selectedEvent)))\n                      .then(() => dispatch(selectNode(selectedNode)));\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession, loadSettings, loadSubmissionQueue,\n    setEventData, setEventList, setShowSettings,\n    updateLoading\n} from \"../drop-serializer-actions\";\nimport {sendNext} from \"./submission\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch, getState) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => {\n                          // Send next submission (if exists) without blocking loading.\n                          dispatch(sendNext());\n\n                          return Promise.resolve();\n                      })\n                      .then(() => {\n                          if (getState().dropSerializer.settings.submitter_name === \"\")\n                              return dispatch(setShowSettings(true));\n\n                          return Promise.resolve();\n                      })\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n                    .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n                    .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    let {submissionQueue} = state.dropSerializer,\n        pendingCount = submissionQueue === undefined ? 0 : submissionQueue.length;\n\n    return {pendingCount};\n};\n\nclass PendingSubmissions extends React.Component {\n    render() {\n        if (this.props.pendingCount === 0)\n            return null;\n\n        return (\n            <Alert variant='warning'>{this.props.pendingCount} pending submission(s).</Alert>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(PendingSubmissions);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\nimport PendingSubmissions from \"./PendingSubmissions\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                <PendingSubmissions />\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"primary\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(5).keys()].map(i =>\n                    <option key={i} value={i * 25}>{i * 25}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 25,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -25\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nconst mapStateToProps = (state) => {\n    const drops = state.dropSerializer.eventData.drops,\n        dropCounts = state.dropSerializer.submissionDrops.map(submissionDrop => {\n            if (submissionDrop.ignored)\n                return 0;\n\n            let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n            if (drop && drop.type === 'Bonus Rate-Up')\n                return 0;\n\n            return submissionDrop.count;\n        }),\n        dropCount = dropCounts.reduce((a, b) => a + b, 0);\n\n    return {dropCount};\n};\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false,\n            timeout: null\n        }\n    }\n\n    componentWillUnmount() {\n        if (!this.state.timeout)\n            return;\n\n        window.clearTimeout(this.state.timeout);\n        this.setState({timeout: null});\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <img className=\"chest-icon\" src=\"assets/chest.png\"/> {this.props.dropCount}\n                &nbsp;\n                -\n                &nbsp;\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({\n            disabled: true,\n            timeout: window.setTimeout(() => {\n                this.setState({disabled: false, timeout: null});\n            }, this.state.delay)\n        });\n    }\n}\n\nexport default connect(mapStateToProps)(SubmitButton);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        sheetId = eventLoaded ? eventData.sheet_id : '',\n        sheetLink = 'https://docs.google.com/spreadsheets/d/' + sheetId;\n\n    return {eventLoaded, sheetLink};\n};\n\nclass SheetButton extends React.Component {\n    render() {\n        if (!this.props.eventLoaded) {\n            return null;\n        }\n\n        return (\n            <a href={this.props.sheetLink}\n               className=\"text-success\"\n               target=\"_blank\" rel=\"noopener noreferrer author\">\n                <FontAwesomeIcon icon=\"file-excel\"/>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SheetButton);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {connect} from 'react-redux';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport Messages from \"./Message/Messages\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\nimport SheetButton from \"./Button/SheetButton\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        return <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <h1>\n                    Drop Serializer\n                    <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                </h1>\n\n                <ToggleSettingButton/>\n\n                <div className=\"links\">\n                    <SheetButton/>\n                    <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'github']}/>\n                    </a>\n                    <a href=\"https://discord.gg/TKJmuCR\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'discord']}/>\n                    </a>\n                </div>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION, RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\"\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFileExcel,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFileExcel);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}