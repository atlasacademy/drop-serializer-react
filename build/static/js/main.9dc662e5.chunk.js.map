{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/submission.js","redux/thunks/load.js","components/Message/Message.js","components/Message/PendingSubmissions.js","components/Message/Messages.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","redux/thunks/query.js","redux/thunks/select.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Button/ToggleFilterButton.js","components/Button/SubmitButton.js","components/Button/SheetButton.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["INIT_STATE","LOAD_SESSION","loadSession","type","LOAD_SETTINGS","LOAD_SUBMISSION_QUEUE","QUEUE_SUBMISSION","PUSH_MESSAGE","pushMessage","message","payload","RESET_SUBMISSION","SELECT_EVENT","setEvent","SELECT_NODE","SET_EVENT_LIST","SET_EVENT_DATA","setEventData","SET_SHOW_FILTERS","SET_SHOW_SETTINGS","setShowSettings","SET_SUBMISSION_PENDING","setSubmissionPending","SHIFT_MESSAGES","SHIFT_SUBMISSIONS","shiftSubmissions","UPDATE_DROP","updateDrop","uid","quantity","count","ignored","UPDATE_LOADING","updateLoading","UPDATE_SETTING","updateSetting","property","value","queue","dispatch","getState","_getState$dropSeriali","dropSerializer","eventData","selectedEvent","selectedNode","settings","submissionDrops","nodeDrops","node_drops","filter","nodeDrop","event_node_uid","submitterName","submitter_name","drops","map","drop","submissionDrop","shift","submission","event_uid","submitter","Promise","resolve","then","sendNext","_getState$dropSeriali2","submissionQueue","submissionPending","length","submit","domain","axios","post","response","data","receipt","catch","error","status","window","setTimeout","init","options","state","Object","objectSpread","enableEventSelector","enableQueryParameters","messageKey","messages","nodeSave","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","showFilters","showSettings","params","URLSearchParams","location","search","has","get","fetchEvents","fetchEvent","Message","_this","this","props","react_default","a","createElement","Alert_default","variant","React","Component","connect","PendingSubmissions","pendingCount","undefined","Messages","className","Message_PendingSubmissions","components_Message_Message","key","mapStateToProps","ownProps","mapDispatchToProps","update","_SettingFieldReduxConnector","reduxConnect","_ref","Form_default","Group","controlId","Label","Control","as","onChange","e","target","disabled","navigator","vibrate","hide","show","toggle","_SettingsReduxConnector","Modal_default","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Click","Vibrate","Button_default","onClick","react_fontawesome","icon","_state$dropSerializer","quantityDisplay","_DropReduxConnector","DropCount","size","parseInt","isNaN","Howl","src","_DropIncrementor","incrementorSettings","classCallCheck","defaultSettings","delay","iteratorSkip","max","min","step","windowLeash","possibleConstructorReturn","getPrototypeOf","call","interval","iterator","running","windowPosition","windowListener","stopInterval","startInterval","stepCount","Math","abs","scrollY","parent","animate","click","play","_this2","setInterval","tick","onWindowScroll","addEventListener","setState","clearInterval","removeEventListener","dropState","_DropIncrementorReduxConnector","DropDecrement","block","tabIndex","onMouseDown","onMouseMove","onMouseOut","onMouseUp","DropIcon","draggable","image","alt","name","DropToggle","DropIndicator","isSelected","difference","indicator","toString","Drop","animating","columns","Incrementor_DropIcon","Drop_DropIndicator","Count_DropCount","Incrementor_DropDecrement","Toggle_DropToggle","DropBonusCount","toConsumableArray","Array","keys","i","DropBonusIcon","DropBonusDecrement","DropBonus","Incrementor_DropBonusIcon","Count_DropBonusCount","Incrementor_DropBonusDecrement","DropContainer","makeNodeDropKey","Drop_DropBonus","components_Drop_Drop","setQuery","eventUid","nodeUid","set","delete","newUrl","protocol","host","pathname","history","replaceState","path","selectNode","EventSelector","updateEvent","concat","eventList","event","NodeSelector","updateNode","nodeList","node","nodes","ToggleFilterButton","SubmitButton","dropCount","_this3","reduce","b","SheetButton","eventLoaded","href","sheetLink","rel","Boolean","sheet_id","DropSerializer","id","width","ToggleSettingsButton","Button_SheetButton","index_es","eventsLoaded","Selector_EventSelector","Selector_NodeSelector","nodeSelected","Drop_DropContainer","Row_default","Col_default","Button_ToggleFilterButton","Button_SubmitButton","SettingsModal","isLoading","spin","Message_Messages","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","storedSettings","push","setItem","stringify","oldMessages","slice","_action$payload","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","es","redux_dynamic_modules_react_lib","modules","reducerMap","components_DropSerializer","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFileExcel","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9dc662e5.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","import axios from \"axios\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession, loadSettings, loadSubmissionQueue,\n    setEventData, setEventList, setShowSettings,\n    updateLoading\n} from \"../drop-serializer-actions\";\nimport {sendNext} from \"./submission\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch, getState) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => {\n                          // Send next submission (if exists) without blocking loading.\n                          dispatch(sendNext());\n\n                          return Promise.resolve();\n                      })\n                      .then(() => {\n                          if (getState().dropSerializer.settings.submitter_name === \"\")\n                              return dispatch(setShowSettings(true));\n\n                          return Promise.resolve();\n                      })\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n                    .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n                    .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    let {submissionQueue} = state.dropSerializer,\n        pendingCount = submissionQueue === undefined ? 0 : submissionQueue.length;\n\n    return {pendingCount};\n};\n\nclass PendingSubmissions extends React.Component {\n    render() {\n        if (this.props.pendingCount === 0)\n            return null;\n\n        return (\n            <Alert variant='warning'>{this.props.pendingCount} pending submission(s).</Alert>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(PendingSubmissions);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\nimport PendingSubmissions from \"./PendingSubmissions\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                <PendingSubmissions />\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"primary\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(11).keys()].map(i =>\n                    <option key={i} value={i * 10}>{i * 10}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 10,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (eventData && uid === eventData.uid)\n            return;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nconst mapStateToProps = (state) => {\n    const dropCounts = state.dropSerializer.submissionDrops.map(submissionDrop =>\n            submissionDrop.ignored ? 0 : submissionDrop.count\n        ),\n        dropCount = dropCounts.reduce((a, b) => a + b, 0);\n\n    return {dropCount};\n};\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false\n        }\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <img className=\"chest-icon\" src=\"assets/chest.png\"/> {this.props.dropCount}\n                &nbsp;\n                -\n                &nbsp;\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({disabled: true});\n        window.setTimeout(() => {\n            this.setState({disabled: false});\n        }, this.state.delay);\n    }\n}\n\nexport default connect(mapStateToProps)(SubmitButton);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        sheetId = eventLoaded ? eventData.sheet_id : '',\n        sheetLink = 'https://docs.google.com/spreadsheets/d/' + sheetId;\n\n    return {eventLoaded, sheetLink};\n};\n\nclass SheetButton extends React.Component {\n    render() {\n        if (!this.props.eventLoaded) {\n            return null;\n        }\n\n        return (\n            <a href={this.props.sheetLink}\n               className=\"text-success\"\n               target=\"_blank\" rel=\"noopener noreferrer author\">\n                <FontAwesomeIcon icon=\"file-excel\"/>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SheetButton);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {connect} from 'react-redux';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport Messages from \"./Message/Messages\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\nimport SheetButton from \"./Button/SheetButton\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        return <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <h1>\n                    Drop Serializer\n                    <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                </h1>\n\n                <ToggleSettingButton/>\n\n                <div className=\"links\">\n                    <SheetButton/>\n                    <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'github']}/>\n                    </a>\n                    <a href=\"https://discord.gg/TKJmuCR\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'discord']}/>\n                    </a>\n                </div>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION, RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\"\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFileExcel,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFileExcel);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}