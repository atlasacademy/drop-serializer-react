{"version":3,"sources":["lib/Messages.js","components/Alerts.js","lib/Storage.js","components/Drop.js","lib/SubmissionsApi.js","lib/SubmissionsQueue.js","components/Node.js","lib/Query.js","components/Event.js","components/Setting.js","components/App.js","serviceWorker.js","index.js"],"names":["listener","Messages","type","message","callback","Alerts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","alerts","push","bind","assertThisInitialized","registerListener","map","alert","key","react_default","a","createElement","Alert_default","variant","className","_this2","JSON","parse","stringify","setState","setTimeout","shiftAlerts","slice","Component","Storage","eventUid","eventNodeUid","makeNodeSessionKey","window","localStorage","removeItem","submissions","getSubmissions","length","shift","nodeSession","getItem","dropUid","dropQuantity","getNodeSession","defaultNodeDrop","uid","quantity","count","ignored","nodeDrop","filter","undefined","submissionsRaw","submitterName","submission","setItem","filteredSession","sessionNodeDrop","name","Drop","increment","interval","intervalSkips","iterator","pointerLeash","pointerX","pointerY","running","timer","windowLeash","windowListener","windowPosition","sessionDrop","getSessionNodeDrop","event_uid","event_node_uid","showFilter","DropIcon","draggable","src","drop","image","alt","onMouseDown","e","startIncrement","onMouseMove","checkMouseMove","onMouseOut","stopIncrement","onMouseUp","doMouseUp","DropIndicator","DropQuantity","DropInput","Form_default","Control","value","onChange","changeCount","DropDecrement","Button_default","block","size","index_es","icon","DropToggle","onClick","toggleIgnored","event","setCount","target","x","clientX","y","clientY","w","Math","abs","h","amount","setSessionNodeDrop","t","setInterval","scrollY","addEventListener","clearInterval","removeEventListener","React","hostname","XMLHttpRequest","require","SubmissionsApi","xhr","onload","submittableEvents","responseText","submittable","open","send","successCallback","failureCallback","urlEncodedData","urlEncodedDataPairs","encodeURIComponent","submitter","drops","forEach","field","Number","join","replace","result","onerror","setRequestHeader","pending","SubmissionsQueue","getNextSubmission","hasQueued","queueSubmission","sendNext","success","clearTimeout","postSubmission","receipt","shiftSubmissions","scheduleNext","Node","dropRefs","renderDrops","Row_default","Col_default","toggleFilter","submit","_this3","nodeDrops","i","src_components_Drop","ref","input","payload","node","getSubmitterName","getState","clearNodeSession","clearDrops","Query","param","urlParams","has","get","params","set","delete","update","toString","query","newurl","location","protocol","host","pathname","history","replaceState","path","URLSearchParams","search","Event","selectNode","extractNode","getNode","nodes","pop","node_drops","sort","b","dropUids","unique","indexOf","selectedNode","renderNodeSelector","renderNode","src_components_Node","options","concat","as","setNode","Setting","show","submitter_name","Modal_default","onHide","handleClose","Header","closeButton","Title","Body","Group","controlId","Label","setSubmitterName","App","selectEvent","isLoadingEvents","isLoadingEvent","eventsData","eventData","selectedEvent","getEvent","getEvents","events","href","setting","toggle","src_components_Alerts","renderEventSelector","renderEvent","renderSettings","renderLoading","src_components_Event","selected","spin","components_Setting","refreshSettings","_this4","setEvent","Boolean","match","library","add","faBan","faCheck","faCog","faCopy","faFilter","faMinus","faSpinner","faTrashAlt","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ce7ebf2.chunk.js","sourcesContent":["let listener;\n\nclass Messages {\n\n    static push(type, message) {\n        listener(type, message);\n    }\n\n    static registerListener(callback) {\n        listener = callback;\n    }\n\n}\n\nexport default Messages;","import React, {Component} from 'react';\nimport Alert from \"react-bootstrap/Alert\";\nimport \"./Alerts.css\";\nimport Messages from \"../lib/Messages\";\n\nclass Alerts extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            alerts: []\n        };\n\n        this.push = this.push.bind(this);\n        Messages.registerListener(this.push);\n    }\n\n    render() {\n        let alerts = this.state.alerts.map((alert, key) => {\n            return <Alert key={key} variant={alert.type}>{alert.message}</Alert>;\n        });\n\n        return (\n            <div className=\"Alerts\">\n                {alerts}\n            </div>\n        );\n    }\n\n    push(type, message) {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        alerts.push({\n            type: type,\n            message: message\n        });\n\n        this.setState({\n            alerts: alerts\n        });\n\n        setTimeout(() => {\n            this.shiftAlerts();\n        }, 5000);\n    }\n\n    shiftAlerts() {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        this.setState({\n            alerts: alerts.slice(1)\n        });\n    }\n}\n\nexport default Alerts;\n","class Storage {\n\n    static clearNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid);\n\n        window.localStorage.removeItem(key);\n    }\n\n    static getNextSubmission() {\n        let submissions = Storage.getSubmissions();\n\n        if (submissions.length === 0)\n            return null;\n\n        return submissions.shift();\n    }\n\n    static getNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = window.localStorage.getItem(key);\n\n        if (nodeSession === null)\n            return [];\n\n        return JSON.parse(nodeSession);\n    }\n\n    static getSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity) {\n        let nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            defaultNodeDrop = {\n                uid: dropUid,\n                quantity: dropQuantity,\n                count: 0,\n                ignored: false\n            };\n\n        let nodeDrop = nodeSession.filter(nodeDrop => {\n            return nodeDrop.uid === dropUid\n                && nodeDrop.quantity === dropQuantity;\n        }).shift();\n\n        if (nodeDrop === undefined)\n            return defaultNodeDrop;\n\n        return nodeDrop;\n    }\n\n    static getSubmissions() {\n        let submissionsRaw = window.localStorage.getItem(\"submissions\");\n\n        return submissionsRaw === null ? [] : JSON.parse(submissionsRaw);\n    }\n\n    static getSubmitterName() {\n        let submitterName = window.localStorage.getItem(\"submitter_name\");\n\n        return submitterName === null ? \"\" : submitterName;\n    }\n\n    static makeNodeSessionKey(eventUid, eventNodeUid) {\n        return \"event_\" + eventUid + \"_node_\" + eventNodeUid;\n    }\n\n    static queueSubmission(submission) {\n        let submissions = Storage.getSubmissions();\n\n        submissions.push(submission);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n    static setSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity, count, ignored) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            filteredSession = nodeSession.filter(sessionNodeDrop => {\n                return sessionNodeDrop.uid !== dropUid\n                    || sessionNodeDrop.quantity !== dropQuantity;\n            });\n\n        filteredSession.push({\n            uid: dropUid,\n            quantity: dropQuantity,\n            count: count,\n            ignored: ignored\n        });\n\n        window.localStorage.setItem(key, JSON.stringify(filteredSession));\n    }\n\n    static setSubmitterName(name) {\n        window.localStorage.setItem(\"submitter_name\", name);\n    }\n\n    static shiftSubmissions() {\n        let submissions = Storage.getSubmissions().slice(1);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n}\n\nexport default Storage;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Storage from \"../lib/Storage\";\nimport \"./Drop.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.increment = {\n            interval: 250,\n            intervalSkips: 3,\n            iterator: 0,\n            pointerLeash: 10,\n            pointerX: null,\n            pointerY: null,\n            running: false,\n            timer: null,\n            windowLeash: 10,\n            windowListener: null,\n            windowPosition: null\n        };\n\n        let sessionDrop = Storage.getSessionNodeDrop(\n            props.nodeDrop.event_uid,\n            props.nodeDrop.event_node_uid,\n            props.nodeDrop.uid,\n            props.nodeDrop.quantity\n        );\n\n        sessionDrop.showFilter = false;\n\n        this.state = sessionDrop;\n    }\n\n    render() {\n        let ignored = this.state.ignored ? \" ignored\" : \"\",\n            showFilter = this.state.showFilter ? \" showFilter\" : \"\",\n            DropIcon = (\n                <img className=\"DropIcon\" draggable=\"false\"\n                     src={this.props.drop.image}\n                     alt={this.props.drop.name}\n                     onMouseDown={(e) => this.startIncrement(e, 1)}\n                     onMouseMove={(e) => this.checkMouseMove(e)}\n                     onMouseOut={(e) => this.stopIncrement()}\n                     onMouseUp={(e) => this.doMouseUp(1)}/>\n            ),\n            DropIndicator = <span className=\"DropIndicator\">+</span>,\n            DropQuantity = (\n                this.props.nodeDrop.quantity > 1\n                    ? <span className=\"DropQuantity\">{this.props.nodeDrop.quantity}</span>\n                    : \"\"\n            ),\n            DropInput = (\n                <Form.Control type=\"text\"\n                              className=\"DropInput form-control form-control-sm\"\n                              value={this.state.count}\n                              onChange={(e) => this.changeCount(e)}/>\n            ),\n            DropDecrement = (\n                <Button variant=\"primary\" block size=\"sm\"\n                        className=\"DropDecrement\"\n                        onMouseDown={(e) => this.startIncrement(e, -1)}\n                        onMouseMove={(e) => this.checkMouseMove(e)}\n                        onMouseOut={(e) => this.stopIncrement()}\n                        onMouseUp={(e) => this.doMouseUp(-1)}>\n                    <FontAwesomeIcon icon=\"minus\"/>\n                </Button>\n            ),\n            DropToggle = (\n                <div className=\"DropToggle\" onClick={(e) => this.toggleIgnored()}>\n                    <FontAwesomeIcon className=\"DropToggleIcon\"\n                                     icon={this.state.ignored ? \"ban\" : \"check\"}/>\n                </div>\n            );\n\n        return (\n            <div className={\"Drop\" + ignored + showFilter}>\n                <div className=\"DropBorder\">\n                    <div className=\"DropContent\">\n                        <div className=\"DropIconBox\">\n                            {DropIcon}\n                            {DropIndicator}\n                            {DropQuantity}\n                        </div>\n                        {DropInput}\n                        {DropDecrement}\n                    </div>\n                    {DropToggle}\n                </div>\n            </div>\n        );\n    }\n\n    changeCount(event) {\n        this.setCount(event.target.value);\n    }\n\n    checkMouseMove(e) {\n        if (!this.increment.running)\n            return;\n\n        let x = e.clientX,\n            y = e.clientY,\n            w = Math.abs(x - this.increment.pointerX),\n            h = Math.abs(y - this.increment.pointerY);\n\n        if (w > this.increment.pointerLeash || h > this.increment.pointerLeash)\n            this.stopIncrement();\n    }\n\n    doMouseUp(amount) {\n        if (!this.increment.running)\n            return;\n\n        if (this.increment.iterator <= this.increment.intervalSkips)\n            this.setCount(this.state.count + amount);\n\n        this.stopIncrement();\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    setCount(value) {\n        Storage.setSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity,\n            value,\n            this.state.ignored\n        );\n\n        this.setState(Storage.getSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity\n        ));\n    }\n\n    startIncrement(e, amount) {\n        this.stopIncrement();\n\n        let t = this;\n        this.increment.iterator = 0;\n        this.increment.pointerX = e.clientX;\n        this.increment.pointerY = e.clientY;\n\n        this.increment.timer = setInterval(function () {\n            if (t.increment.iterator > t.increment.intervalSkips)\n                t.setCount(t.state.count + amount);\n\n            t.increment.iterator++;\n        }, this.increment.interval);\n        this.increment.windowPosition = window.scrollY;\n        this.increment.windowListener = function (e) {\n            let diff = Math.abs(window.scrollY - t.increment.windowPosition);\n\n            if (diff > t.increment.windowLeash)\n                t.stopIncrement();\n        };\n        window.addEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.running = true;\n    }\n\n    stopIncrement() {\n        if (!this.increment.running)\n            return;\n\n        clearInterval(this.increment.timer);\n        window.removeEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.timer = null;\n        this.increment.windowListener = null;\n        this.increment.running = false;\n    }\n\n    toggleFilter() {\n        this.setState({\n            showFilter: !this.state.showFilter\n        });\n    }\n\n    toggleIgnored() {\n        Storage.setSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity,\n            0,\n            !this.state.ignored\n        );\n\n        this.setState(Storage.getSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity\n        ));\n    }\n}\n\nexport default Drop;","const hostname = \"https://submissions.atlasacademy.io\";\n// const hostname = \"http://submissions.test.atlasacademy.io\";\nconst XMLHttpRequest = require(\"xmlhttprequest-ssl\").XMLHttpRequest;\n\nclass SubmissionsApi {\n\n    static getEvents(callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let events = JSON.parse(xhr.responseText),\n                submittableEvents = events.filter(event => {\n                    return event.submittable;\n                });\n\n            callback(submittableEvents);\n        };\n        xhr.open(\"GET\", hostname + \"/event\");\n        xhr.send();\n    }\n\n    static getEvent(uid, callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let event = JSON.parse(xhr.responseText);\n\n            if (!event.submittable)\n                return;\n\n            callback(event);\n        };\n        xhr.open(\"GET\", hostname + \"/event/\" + uid);\n        xhr.send();\n    }\n\n    static postSubmission(submission, successCallback, failureCallback) {\n        let xhr = new XMLHttpRequest(),\n            urlEncodedData,\n            urlEncodedDataPairs = [];\n\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_uid\") + '=' + encodeURIComponent(submission.event_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_node_uid\") + '=' + encodeURIComponent(submission.event_node_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"submitter\") + '=' + encodeURIComponent(submission.submitter));\n        submission.drops.forEach((drop, key) => {\n            for (let field in drop) {\n                let value = typeof drop[field] === \"boolean\" ? Number(drop[field]) : encodeURIComponent(drop[field]);\n                urlEncodedDataPairs.push(\n                    encodeURIComponent(\"drops[\" + key + \"][\" + field + \"]\")\n                    + '='\n                    + value\n                );\n            }\n        });\n\n        urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');\n\n        xhr.onload = function () {\n            let result = JSON.parse(xhr.responseText);\n\n            successCallback(result);\n        };\n\n        xhr.onerror = function () {\n            failureCallback();\n        };\n\n        xhr.open(\"POST\", hostname + \"/submit/run\");\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(urlEncodedData);\n    }\n\n}\n\nexport default SubmissionsApi;","import Storage from \"./Storage\";\nimport SubmissionsApi from \"./SubmissionsApi\";\nimport Messages from \"./Messages\";\n\nconst successDelay = 2500;\nconst failureDelay = 20000;\nlet pending = false,\n    timer = null;\n\nclass SubmissionsQueue {\n\n    static hasQueued() {\n        let submission = Storage.getNextSubmission();\n\n        return submission !== null;\n    }\n\n    static push(submission) {\n        let hasQueued = SubmissionsQueue.hasQueued();\n        Storage.queueSubmission(submission);\n\n        if (!hasQueued)\n            SubmissionsQueue.sendNext();\n    }\n\n    static scheduleNext(success) {\n        if (pending)\n            return;\n\n        if (!SubmissionsQueue.hasQueued())\n            return;\n\n        pending = true;\n        timer = setTimeout(() => {\n            SubmissionsQueue.sendNext();\n        }, success ? successDelay : failureDelay);\n    }\n\n    static sendNext() {\n        if (pending)\n            clearTimeout(timer);\n        pending = false;\n        timer = null;\n\n        let submission = Storage.getNextSubmission();\n\n        if (submission === null) {\n            SubmissionsQueue.scheduleNext(false);\n            return;\n        }\n\n        SubmissionsApi.postSubmission(submission, (result) => {\n            Messages.push(\"success\", \"Created new submission: \" + result.receipt);\n            Storage.shiftSubmissions();\n\n            SubmissionsQueue.scheduleNext(true);\n        }, () => {\n            SubmissionsQueue.scheduleNext(false);\n        });\n    }\n\n}\n\nexport default SubmissionsQueue;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Drop from \"./Drop\";\nimport \"./Node.css\";\nimport Storage from \"../lib/Storage\";\nimport Button from \"react-bootstrap/Button\";\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass Node extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.dropRefs = [];\n    }\n\n    render() {\n        return (\n            <div className=\"Node\">\n                <div className=\"DropsContainer\">\n                    {this.renderDrops()}\n                </div>\n                <Row>\n                    <Col>\n                        <Button variant=\"primary\" block onClick={(e) => this.toggleFilter()}>\n                            <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"success\" block onClick={(e) => this.submit()}>\n                            <FontAwesomeIcon icon=\"copy\"/> Submit Run\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    renderDrops() {\n        return this.props.nodeDrops.map((nodeDrop, i) => {\n            let drop = this.props.drops.filter(drop => {\n                    return drop.uid === nodeDrop.uid;\n                }).shift();\n\n            return <Drop key={i}\n                         nodeDrop={nodeDrop}\n                         drop={drop}\n                         ref={input => {\n                             this.dropRefs.push(input);\n                         }}/>\n        });\n    }\n\n    clearDrops() {\n        this.dropRefs.forEach(drop => {\n            drop.setCount(0);\n        });\n    }\n\n    toggleFilter() {\n        this.dropRefs.forEach(drop => {\n            drop.toggleFilter();\n        });\n    }\n\n    submit() {\n        let payload = {\n            event_uid: this.props.node.event_uid,\n            event_node_uid: this.props.node.uid,\n            submitter: Storage.getSubmitterName(),\n            drops: this.dropRefs.map(drop => {\n                return drop.getState();\n            })\n        };\n\n        SubmissionsQueue.push(payload);\n        Storage.clearNodeSession(this.props.node.event_uid, this.props.node.uid);\n        this.clearDrops();\n    }\n}\n\nexport default Node;","class Query {\n\n    static get(param) {\n        return Query.urlParams().has(param) ? Query.urlParams().get(param) : \"\";\n    }\n\n    static getEvent() {\n        return Query.get(\"event\");\n    }\n\n    static getNode() {\n        return Query.get(\"node\");\n    }\n\n    static setEvent(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"event\", uid);\n        else\n            params.delete(\"event\");\n\n        params.delete(\"node\");\n        Query.update(\"?\" + params.toString());\n    }\n\n    static setNode(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"node\", uid);\n        else\n            params.delete(\"node\");\n\n        Query.update(\"?\" + params.toString());\n    }\n\n    static update(query) {\n        let newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + query;\n        window.history.replaceState({path: newurl}, '', newurl);\n    }\n\n    static urlParams() {\n        return new URLSearchParams(window.location.search);\n    }\n\n}\n\nexport default Query;","import unique from \"array-unique\";\nimport React from 'react';\nimport Node from \"./Node\";\nimport Query from \"../lib/Query\";\nimport \"./Event.css\";\nimport Form from \"react-bootstrap/Form\";\n\nclass Event extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.selectNode = this.selectNode.bind(this);\n\n        this.state = this.extractNode(Query.getNode());\n    }\n\n    extractNode(uid) {\n        let node = this.props.event.nodes.filter(node => {\n                return node.uid === uid;\n            }).pop(),\n            nodeDrops = this.props.event.node_drops.filter(drop => {\n                return drop.event_node_uid === uid;\n            }).sort(((a, b) => {\n                return a.sort - b.sort;\n            })),\n            dropUids = unique(nodeDrops.map(drop => {\n                return drop.uid;\n            })),\n            drops = this.props.event.drops.filter(drop => {\n                return dropUids.indexOf(drop.uid) !== -1;\n            });\n\n        return {\n            selectedNode: uid,\n            node: node,\n            nodeDrops: nodeDrops,\n            drops: drops\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"Event\">\n                {this.renderNodeSelector()}\n                {this.renderNode()}\n            </div>\n        );\n    }\n\n    renderNode() {\n        if (!this.state.selectedNode)\n            return;\n\n        return <Node node={this.state.node} nodeDrops={this.state.nodeDrops} drops={this.state.drops}/>\n    }\n\n    renderNodeSelector() {\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a node</option>\n            ].concat(this.props.event.nodes.map(node => {\n                return <option key={i++} value={node.uid}>{node.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"NodeSelector custom-select\"\n                          onChange={this.selectNode}\n                          value={this.state.selectedNode}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    selectNode(event) {\n        let uid = event.target.value;\n        Query.setNode(uid);\n\n        this.setState(this.extractNode(uid));\n    }\n}\n\nexport default Event;","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Storage from \"../lib/Storage\";\n\nclass Setting extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n            submitter_name: Storage.getSubmitterName()\n        };\n    }\n\n    render() {\n        return (\n            <Modal show={this.state.show} onHide={e => this.handleClose()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Settings</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group controlId=\"settingSubmitterName\">\n                        <Form.Label>Submitter Name</Form.Label>\n                        <Form.Control value={this.state.submitter_name}\n                                      onChange={e => this.setSubmitterName(e.target.value)}/>\n                    </Form.Group>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    setSubmitterName(name) {\n        Storage.setSubmitterName(name);\n        this.setState({\n            \"submitter_name\": Storage.getSubmitterName()\n        });\n    }\n\n    toggle() {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n}\n\nexport default Setting;\n","import React, {Component} from 'react';\nimport Alerts from \"./Alerts\";\nimport Button from \"react-bootstrap/Button\";\nimport Event from \"./Event\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Form from \"react-bootstrap/Form\";\nimport Query from \"../lib/Query\";\nimport Setting from \"./Setting\";\nimport SubmissionsApi from \"../lib/SubmissionsApi\";\nimport './App.css';\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.selectEvent = this.selectEvent.bind(this);\n\n        this.state = {\n            isLoadingEvents: true,\n            isLoadingEvent: false,\n            eventsData: [],\n            eventData: null,\n            selectedEvent: Query.getEvent()\n        };\n\n        SubmissionsApi.getEvents(events => {\n            this.setState({\n                isLoadingEvents: false,\n                isLoadingEvent: this.state.selectedEvent.length > 0,\n                eventsData: events\n            });\n\n            if (this.state.selectedEvent.length > 0) {\n                SubmissionsApi.getEvent(this.state.selectedEvent, event => {\n                    this.setState({\n                        isLoadingEvent: false,\n                        eventData: event\n                    });\n                });\n            }\n        });\n\n        SubmissionsQueue.scheduleNext(true);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"AppTitle\">\n                    <h1>\n                        Drop Serializer\n                        <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                    </h1>\n                    <Button variant=\"info\" className=\"AppSettingsToggle\"\n                            onClick={e => this.setting.toggle()}>\n                        <FontAwesomeIcon icon=\"cog\"/>\n                    </Button>\n                </div>\n\n                <Alerts/>\n                {this.renderEventSelector()}\n                {this.renderEvent()}\n                {this.renderSettings()}\n                {this.renderLoading()}\n            </div>\n        );\n    }\n\n    refreshSettings() {\n\n    }\n\n    renderEvent() {\n        if (!this.state.selectedEvent || !this.state.eventData)\n            return;\n\n        return <Event event={this.state.eventData} selected={this.state.selectedEvent}/>;\n    }\n\n    renderEventSelector() {\n        if (this.state.isLoadingEvents)\n            return;\n\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a event</option>\n            ].concat(this.state.eventsData.map(event => {\n                return <option key={i++} value={event.uid}>{event.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"EventSelector\"\n                          onChange={this.selectEvent}\n                          value={this.state.selectedEvent}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    renderLoading() {\n        if (this.state.isLoadingEvents || this.state.isLoadingEvent)\n            return (\n                <div className=\"AppLoading\">\n                    <div className=\"AppLoadingContent\">\n                        <FontAwesomeIcon icon=\"spinner\" spin/>\n                    </div>\n                </div>\n            );\n    }\n\n    renderSettings() {\n        return (\n            <Setting ref={(input) => {\n                this.setting = input;\n            }} onChange={() => {\n                this.refreshSettings();\n            }}/>\n        );\n    }\n\n    selectEvent(event) {\n        let uid = event.target.value;\n\n        Query.setEvent(uid);\n        this.setState({\n            isLoadingEvent: false,\n            eventData: null,\n            selectedEvent: uid\n        });\n\n        if (!uid)\n            return;\n\n        this.setState({\n            isLoadingEvent: true\n        });\n\n        SubmissionsApi.getEvent(uid, event => {\n            this.setState({\n                isLoadingEvent: false,\n                eventData: event\n            });\n        })\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faBan, faCheck, faCog, faCopy, faFilter, faMinus, faSpinner, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}