{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/query.js","redux/thunks/select.js","redux/thunks/submission.js","redux/thunks/load.js","components/Message/Message.js","components/Message/PendingSubmissions.js","components/Message/Messages.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Button/ToggleFilterButton.js","components/Button/SubmitButton.js","components/Button/SheetButton.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["INIT_STATE","LOAD_SESSION","loadSession","type","LOAD_SETTINGS","LOAD_SUBMISSION_QUEUE","QUEUE_SUBMISSION","PUSH_MESSAGE","pushMessage","message","payload","RESET_SUBMISSION","SELECT_EVENT","setEvent","SELECT_NODE","SET_EVENT_LIST","SET_EVENT_DATA","setEventData","SET_SHOW_FILTERS","SET_SHOW_SETTINGS","setShowSettings","SET_SUBMISSION_PENDING","setSubmissionPending","SHIFT_MESSAGES","SHIFT_SUBMISSIONS","shiftSubmissions","UPDATE_DROP","updateDrop","uid","quantity","count","ignored","UPDATE_LOADING","updateLoading","UPDATE_SETTING","updateSetting","property","value","setQuery","eventUid","nodeUid","dispatch","getState","dropSerializer","enableQueryParameters","location","window","params","URLSearchParams","search","set","delete","newUrl","protocol","host","pathname","toString","history","replaceState","path","selectEvent","eventData","Promise","resolve","then","fetchEvent","selectNode","selectedEvent","queue","selectedNode","settings","submissionDrops","nodeDrops","node_drops","filter","nodeDrop","event_node_uid","submitterName","submitter_name","drops","map","drop","submissionDrop","shift","submission","event_uid","submitter","token","uuidv1","sendNext","submissionQueue","submissionPending","length","submit","domain","axios","post","response","data","receipt","reloadOutdatedEventData","missing_drops","catch","error","status","setTimeout","submissionEventUid","missingDrops","init","options","state","enableEventSelector","messageKey","messages","nodeSave","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","showFilters","showSettings","has","get","fetchEvents","Message","props","variant","this","React","Component","connect","PendingSubmissions","pendingCount","undefined","Messages","className","key","mapStateToProps","ownProps","mapDispatchToProps","update","reduxConnect","_SettingFieldReduxConnector","Group","controlId","Label","Control","as","onChange","e","target","disabled","navigator","vibrate","hide","show","toggle","_SettingsReduxConnector","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Click","Vibrate","onClick","icon","quantityDisplay","DropCount","size","parseInt","isNaN","_DropReduxConnector","Howl","src","_DropIncrementor","incrementorSettings","defaultSettings","delay","iteratorSkip","max","min","step","windowLeash","interval","iterator","running","windowPosition","windowListener","stopInterval","startInterval","stepCount","Math","abs","scrollY","parent","animate","click","play","setInterval","tick","onWindowScroll","addEventListener","setState","clearInterval","removeEventListener","DropDecrement","block","tabIndex","onMouseDown","onMouseMove","onMouseOut","onMouseUp","_DropIncrementorReduxConnector","DropIcon","draggable","image","alt","name","DropToggle","DropIndicator","isSelected","difference","indicator","Drop","animating","columns","DropBonusCount","Array","keys","i","DropBonusIcon","DropBonusDecrement","DropBonus","DropContainer","makeNodeDropKey","EventSelector","updateEvent","concat","eventList","event","NodeSelector","updateNode","nodeList","node","nodes","ToggleFilterButton","SubmitButton","timeout","clearTimeout","dropCount","reduce","a","b","SheetButton","eventLoaded","href","sheetLink","rel","Boolean","sheet_id","DropSerializer","id","width","eventsLoaded","nodeSelected","isLoading","spin","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","push","setItem","stringify","oldMessages","slice","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","modules","reducerMap","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFileExcel","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.084a83f8.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import axios from \"axios\";\nimport uuidv1 from \"uuid/v1\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\nimport {selectEvent, selectNode} from \"./select\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops,\n            token: uuidv1()\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {event_uid} = submission;\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(reloadOutdatedEventData(event_uid, response.data.missing_drops)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n\nexport const reloadOutdatedEventData = (submissionEventUid, missingDrops) => {\n    return (dispatch, getState) => {\n        const {selectedEvent, selectedNode} = getState().dropSerializer;\n\n        // Event data isn't outdated\n        if (!missingDrops) {\n            return Promise.resolve();\n        }\n\n        // Outdated event isn't the current selected event. They will refresh if they select again so do not force\n        // a refresh\n        if (submissionEventUid !== selectedEvent) {\n            return Promise.resolve();\n        }\n\n        // Event data is outdated. Refresh the data\n        return Promise.resolve()\n                      .then(() => dispatch(pushMessage(\n                          \"info\",\n                          \"Event data is outdated. Refreshing now ...\"\n                      )))\n                      .then(() => dispatch(selectEvent('')))\n                      .then(() => dispatch(selectEvent(selectedEvent)))\n                      .then(() => dispatch(selectNode(selectedNode)));\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession, loadSettings, loadSubmissionQueue,\n    setEventData, setEventList, setShowSettings,\n    updateLoading\n} from \"../drop-serializer-actions\";\nimport {sendNext} from \"./submission\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch, getState) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => {\n                          // Send next submission (if exists) without blocking loading.\n                          dispatch(sendNext());\n\n                          return Promise.resolve();\n                      })\n                      .then(() => {\n                          if (getState().dropSerializer.settings.submitter_name === \"\")\n                              return dispatch(setShowSettings(true));\n\n                          return Promise.resolve();\n                      })\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n                    .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n                    .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    let {submissionQueue} = state.dropSerializer,\n        pendingCount = submissionQueue === undefined ? 0 : submissionQueue.length;\n\n    return {pendingCount};\n};\n\nclass PendingSubmissions extends React.Component {\n    render() {\n        if (this.props.pendingCount === 0)\n            return null;\n\n        return (\n            <Alert variant='warning'>{this.props.pendingCount} pending submission(s).</Alert>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(PendingSubmissions);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\nimport PendingSubmissions from \"./PendingSubmissions\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                <PendingSubmissions />\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"primary\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(11).keys()].map(i =>\n                    <option key={i} value={i * 10}>{i * 10}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 10,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nconst mapStateToProps = (state) => {\n    const dropCounts = state.dropSerializer.submissionDrops.map(submissionDrop =>\n            submissionDrop.ignored ? 0 : submissionDrop.count\n        ),\n        dropCount = dropCounts.reduce((a, b) => a + b, 0);\n\n    return {dropCount};\n};\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false,\n            timeout: null\n        }\n    }\n\n    componentWillUnmount() {\n        if (!this.state.timeout)\n            return;\n\n        window.clearTimeout(this.state.timeout);\n        this.setState({timeout: null});\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <img className=\"chest-icon\" src=\"assets/chest.png\"/> {this.props.dropCount}\n                &nbsp;\n                -\n                &nbsp;\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({\n            disabled: true,\n            timeout: window.setTimeout(() => {\n                this.setState({disabled: false, timeout: null});\n            }, this.state.delay)\n        });\n    }\n}\n\nexport default connect(mapStateToProps)(SubmitButton);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        sheetId = eventLoaded ? eventData.sheet_id : '',\n        sheetLink = 'https://docs.google.com/spreadsheets/d/' + sheetId;\n\n    return {eventLoaded, sheetLink};\n};\n\nclass SheetButton extends React.Component {\n    render() {\n        if (!this.props.eventLoaded) {\n            return null;\n        }\n\n        return (\n            <a href={this.props.sheetLink}\n               className=\"text-success\"\n               target=\"_blank\" rel=\"noopener noreferrer author\">\n                <FontAwesomeIcon icon=\"file-excel\"/>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SheetButton);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {connect} from 'react-redux';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport Messages from \"./Message/Messages\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\nimport SheetButton from \"./Button/SheetButton\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        return <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <h1>\n                    Drop Serializer\n                    <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                </h1>\n\n                <ToggleSettingButton/>\n\n                <div className=\"links\">\n                    <SheetButton/>\n                    <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'github']}/>\n                    </a>\n                    <a href=\"https://discord.gg/TKJmuCR\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'discord']}/>\n                    </a>\n                </div>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION, RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\"\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFileExcel,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFileExcel);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}