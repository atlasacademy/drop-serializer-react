{"version":3,"sources":["lib/Messages.js","components/Alerts.js","lib/Storage.js","components/Drop.js","lib/SubmissionsApi.js","lib/SubmissionsQueue.js","components/DropBonus.js","components/Node.js","lib/Query.js","components/Event.js","components/Setting.js","components/App.js","serviceWorker.js","index.js"],"names":["listener","Messages","type","message","callback","Alerts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","alerts","push","bind","assertThisInitialized","registerListener","map","alert","key","react_default","a","createElement","Alert_default","variant","className","_this2","JSON","parse","stringify","setState","setTimeout","shiftAlerts","slice","Component","events","EventEmitter","Storage","eventUid","eventNodeUid","makeNodeSessionKey","window","localStorage","removeItem","submissions","getSubmissions","length","shift","nodeSession","getItem","settingsRaw","settings","extend","columns","width","dropUid","dropQuantity","getNodeSession","defaultNodeDrop","uid","quantity","count","ignored","nodeDrop","filter","undefined","submissionsRaw","submitterName","on","submission","setItem","filteredSession","sessionNodeDrop","property","value","getSettings","emit","name","Drop","increment","interval","intervalSkips","iterator","pointerLeash","pointerX","pointerY","running","timer","windowLeash","windowListener","windowPosition","sessionDrop","getSessionNodeDrop","event_uid","event_node_uid","showFilter","active","onUpdateSettings","refreshSettings","DropIcon","draggable","src","drop","image","alt","onMouseDown","e","startIncrement","onMouseMove","checkMouseMove","onMouseOut","stopIncrement","onMouseUp","doMouseUp","DropIndicator","DropQuantity","DropInput","Form_default","Control","onChange","changeCount","DropDecrement","Button_default","block","size","index_es","icon","DropToggle","onClick","toggleIgnored","event","setCount","target","x","clientX","y","clientY","w","Math","abs","h","amount","_this3","doIncrement","parseInt","isNaN","setSessionNodeDrop","t","setInterval","scrollY","addEventListener","clearInterval","removeEventListener","React","hostname","XMLHttpRequest","require","SubmissionsApi","xhr","onload","submittableEvents","responseText","submittable","open","send","successCallback","failureCallback","urlEncodedData","urlEncodedDataPairs","encodeURIComponent","submitter","drops","forEach","field","Number","join","replace","status","result","onerror","setRequestHeader","pending","SubmissionsQueue","getNextSubmission","isMissingDropsCallback","hasQueued","queueSubmission","sendNext","success","clearTimeout","postSubmission","receipt","shiftSubmissions","missing_drops","scheduleNext","code","DropBonus","as","Node","dropRefs","clickSound","Howl","renderDrops","Row_default","Col_default","toggleFilter","submit","nodeDrops","i","components_DropBonus","notifyClick","ref","input","src_components_Drop","clear","play","navigator","vibrate","_this4","payload","node","getSubmitterName","getState","onOutdated","clearNodeSession","clearDrops","Query","param","urlParams","has","get","params","set","delete","update","toString","query","newurl","location","protocol","host","pathname","history","replaceState","path","URLSearchParams","search","Event","selectNode","nodeKey","extractNode","getNode","nodes","pop","node_drops","sort","b","dropUids","unique","indexOf","selectedNode","renderNodeSelector","renderNode","src_components_Node","options","concat","setNode","Setting","show","submitter_name","Modal_default","onHide","handleClose","Header","closeButton","Title","Body","Group","controlId","Label","setSubmitterName","submitterInput","setAppWidth","setNumberOfColumns","focus","setSettings","App","selectEvent","isLoadingEvents","isLoadingEvent","eventsData","eventData","selectedEvent","getEvent","getEvents","href","setting","toggle","rel","src_components_Alerts","renderEventSelector","renderEvent","renderSettings","renderLoading","src_components_Event","selected","reloadEvent","spin","_this5","components_Setting","_this6","setEvent","Boolean","match","library","add","faBan","faCheck","faCog","faCopy","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5428e954.chunk.js","sourcesContent":["let listener;\n\nclass Messages {\n\n    static push(type, message) {\n        listener(type, message);\n    }\n\n    static registerListener(callback) {\n        listener = callback;\n    }\n\n}\n\nexport default Messages;","import React, {Component} from 'react';\nimport Alert from \"react-bootstrap/Alert\";\nimport \"./Alerts.css\";\nimport Messages from \"../lib/Messages\";\n\nclass Alerts extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            alerts: []\n        };\n\n        this.push = this.push.bind(this);\n        Messages.registerListener(this.push);\n    }\n\n    render() {\n        let alerts = this.state.alerts.map((alert, key) => {\n            return <Alert key={key} variant={alert.type}>{alert.message}</Alert>;\n        });\n\n        return (\n            <div className=\"Alerts\">\n                {alerts}\n            </div>\n        );\n    }\n\n    push(type, message) {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        alerts.push({\n            type: type,\n            message: message\n        });\n\n        this.setState({\n            alerts: alerts\n        });\n\n        setTimeout(() => {\n            this.shiftAlerts();\n        }, 5000);\n    }\n\n    shiftAlerts() {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        this.setState({\n            alerts: alerts.slice(1)\n        });\n    }\n}\n\nexport default Alerts;\n","import EventEmitter from \"events\";\nimport extend from \"extend\";\n\nconst events = new EventEmitter();\n\nclass Storage {\n\n    static clearNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid);\n\n        window.localStorage.removeItem(key);\n    }\n\n    static getNextSubmission() {\n        let submissions = Storage.getSubmissions();\n\n        if (submissions.length === 0)\n            return null;\n\n        return submissions.shift();\n    }\n\n    static getNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = window.localStorage.getItem(key);\n\n        if (nodeSession === null)\n            return [];\n\n        return JSON.parse(nodeSession);\n    }\n\n    static getSettings() {\n        let settingsRaw = window.localStorage.getItem(\"settings\"),\n            settings = settingsRaw === null ? {} : JSON.parse(settingsRaw);\n\n        return extend({\n            columns: \"columns_auto\",\n            width: \"width_full\"\n        }, settings);\n    }\n\n    static getSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity) {\n        let nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            defaultNodeDrop = {\n                uid: dropUid,\n                quantity: dropQuantity,\n                count: 0,\n                ignored: false\n            };\n\n        let nodeDrop = nodeSession.filter(nodeDrop => {\n            return nodeDrop.uid === dropUid\n                && nodeDrop.quantity === dropQuantity;\n        }).shift();\n\n        if (nodeDrop === undefined)\n            return defaultNodeDrop;\n\n        return nodeDrop;\n    }\n\n    static getSubmissions() {\n        let submissionsRaw = window.localStorage.getItem(\"submissions\");\n\n        return submissionsRaw === null ? [] : JSON.parse(submissionsRaw);\n    }\n\n    static getSubmitterName() {\n        let submitterName = window.localStorage.getItem(\"submitter_name\");\n\n        return submitterName === null ? \"\" : submitterName;\n    }\n\n    static makeNodeSessionKey(eventUid, eventNodeUid) {\n        return \"event_\" + eventUid + \"_node_\" + eventNodeUid;\n    }\n\n    static onUpdateSettings(listener) {\n        events.on(\"update_settings\", listener);\n    }\n\n    static queueSubmission(submission) {\n        let submissions = Storage.getSubmissions();\n\n        submissions.push(submission);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n    static setSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity, count, ignored) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            filteredSession = nodeSession.filter(sessionNodeDrop => {\n                return sessionNodeDrop.uid !== dropUid\n                    || sessionNodeDrop.quantity !== dropQuantity;\n            });\n\n        filteredSession.push({\n            uid: dropUid,\n            quantity: dropQuantity,\n            count: count,\n            ignored: ignored\n        });\n\n        window.localStorage.setItem(key, JSON.stringify(filteredSession));\n    }\n\n    static setSettings(property, value) {\n        let settings = Storage.getSettings();\n        settings[property] = value;\n\n        window.localStorage.setItem(\"settings\", JSON.stringify(settings));\n        events.emit(\"update_settings\");\n    }\n\n    static setSubmitterName(name) {\n        window.localStorage.setItem(\"submitter_name\", name);\n    }\n\n    static shiftSubmissions() {\n        let submissions = Storage.getSubmissions().slice(1);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n}\n\nexport default Storage;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Storage from \"../lib/Storage\";\nimport \"./Drop.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.increment = {\n            interval: 250,\n            intervalSkips: 3,\n            iterator: 0,\n            pointerLeash: 10,\n            pointerX: null,\n            pointerY: null,\n            running: false,\n            timer: null,\n            windowLeash: 10,\n            windowListener: null,\n            windowPosition: null\n        };\n\n        let sessionDrop = Storage.getSessionNodeDrop(\n            props.nodeDrop.event_uid,\n            props.nodeDrop.event_node_uid,\n            props.nodeDrop.uid,\n            props.nodeDrop.quantity\n        );\n\n        sessionDrop.showFilter = false;\n        sessionDrop.active = false;\n        sessionDrop.columns = Storage.getSettings().columns;\n\n        this.state = sessionDrop;\n\n        Storage.onUpdateSettings(() => {\n            this.refreshSettings();\n        });\n    }\n\n    render() {\n        let columns = \" \" + this.state.columns,\n            ignored = this.state.ignored ? \" ignored\" : \"\",\n            showFilter = this.state.showFilter ? \" showFilter\" : \"\",\n            active = this.state.active ? \" active\" : \"\",\n            DropIcon = (\n                <img className=\"DropIcon\" draggable=\"false\"\n                     src={this.props.drop.image}\n                     alt={this.props.drop.name}\n                     onMouseDown={(e) => this.startIncrement(e, 1)}\n                     onMouseMove={(e) => this.checkMouseMove(e)}\n                     onMouseOut={(e) => this.stopIncrement()}\n                     onMouseUp={(e) => this.doMouseUp(1)}/>\n            ),\n            DropIndicator = <span className=\"DropIndicator\">+</span>,\n            DropQuantity = (\n                this.props.nodeDrop.quantity > 1\n                    ? <span className=\"DropQuantity\">{this.props.nodeDrop.quantity}</span>\n                    : \"\"\n            ),\n            DropInput = (\n                <Form.Control type=\"text\"\n                              className=\"DropInput form-control form-control-sm\"\n                              value={this.state.count}\n                              onChange={(e) => this.changeCount(e)}/>\n            ),\n            DropDecrement = (\n                <Button variant=\"primary\" block size=\"sm\"\n                        className=\"DropDecrement\"\n                        onMouseDown={(e) => this.startIncrement(e, -1)}\n                        onMouseMove={(e) => this.checkMouseMove(e)}\n                        onMouseOut={(e) => this.stopIncrement()}\n                        onMouseUp={(e) => this.doMouseUp(-1)}>\n                    <FontAwesomeIcon icon=\"minus\"/>\n                </Button>\n            ),\n            DropToggle = (\n                <div className=\"DropToggle\" onClick={(e) => this.toggleIgnored()}>\n                    <FontAwesomeIcon className=\"DropToggleIcon\"\n                                     icon={this.state.ignored ? \"ban\" : \"check\"}/>\n                </div>\n            );\n\n        return (\n            <div className={\"Drop\" + columns + ignored + showFilter + active}>\n                <div className=\"DropBorder\">\n                    <div className=\"DropContent\">\n                        <div className=\"DropIconBox\">\n                            {DropIcon}\n                            {DropIndicator}\n                            {DropQuantity}\n                        </div>\n                        {DropInput}\n                        {DropDecrement}\n                    </div>\n                    {DropToggle}\n                </div>\n            </div>\n        );\n    }\n\n    changeCount(event) {\n        this.setCount(event.target.value);\n    }\n\n    checkMouseMove(e) {\n        if (!this.increment.running)\n            return;\n\n        let x = e.clientX,\n            y = e.clientY,\n            w = Math.abs(x - this.increment.pointerX),\n            h = Math.abs(y - this.increment.pointerY);\n\n        if (w > this.increment.pointerLeash || h > this.increment.pointerLeash)\n            this.stopIncrement();\n    }\n\n    clear() {\n        this.setCount(0);\n    }\n\n    doIncrement(amount) {\n        this.setCount(0 + this.state.count + amount);\n\n        this.setState({active: true});\n        setTimeout(() => {\n            this.setState({active: false});\n        }, 50);\n\n        if (this.props.onClick)\n            this.props.onClick();\n    }\n\n    doMouseUp(amount) {\n        if (!this.increment.running)\n            return;\n\n        if (this.increment.iterator <= this.increment.intervalSkips)\n            this.doIncrement(amount);\n\n        this.stopIncrement();\n    }\n\n    getState() {\n        return {\n            uid: this.state.uid,\n            quantity: this.state.quantity,\n            count: this.state.count,\n            ignored: this.state.ignored\n        };\n    }\n\n    refreshSettings() {\n        this.setState({\n            columns: Storage.getSettings().columns\n        });\n    }\n\n    setCount(value) {\n        if (typeof value === \"string\" && value !== \"\")\n            value = parseInt(value);\n        if (isNaN(value) || value < 0)\n            value = 0;\n\n        Storage.setSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity,\n            value,\n            this.state.ignored\n        );\n\n        this.setState(Storage.getSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity\n        ));\n    }\n\n    startIncrement(e, amount) {\n        this.stopIncrement();\n\n        let t = this;\n        this.increment.iterator = 0;\n        this.increment.pointerX = e.clientX;\n        this.increment.pointerY = e.clientY;\n\n        this.increment.timer = setInterval(function () {\n            if (t.increment.iterator > t.increment.intervalSkips)\n                t.doIncrement(amount);\n\n            t.increment.iterator++;\n        }, this.increment.interval);\n        this.increment.windowPosition = window.scrollY;\n        this.increment.windowListener = function (e) {\n            let diff = Math.abs(window.scrollY - t.increment.windowPosition);\n\n            if (diff > t.increment.windowLeash)\n                t.stopIncrement();\n        };\n        window.addEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.running = true;\n    }\n\n    stopIncrement() {\n        if (!this.increment.running)\n            return;\n\n        clearInterval(this.increment.timer);\n        window.removeEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.timer = null;\n        this.increment.windowListener = null;\n        this.increment.running = false;\n    }\n\n    toggleFilter() {\n        this.setState({\n            showFilter: !this.state.showFilter\n        });\n    }\n\n    toggleIgnored() {\n        Storage.setSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity,\n            0,\n            !this.state.ignored\n        );\n\n        this.setState(Storage.getSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity\n        ));\n    }\n}\n\nexport default Drop;","const hostname = \"https://submissions.atlasacademy.io\";\n// const hostname = \"http://submissions.test.atlasacademy.io\";\nconst XMLHttpRequest = require(\"xmlhttprequest-ssl\").XMLHttpRequest;\n\nclass SubmissionsApi {\n\n    static getEvents(callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let events = JSON.parse(xhr.responseText),\n                submittableEvents = events.filter(event => {\n                    return event.submittable;\n                });\n\n            callback(submittableEvents);\n        };\n        xhr.open(\"GET\", hostname + \"/event\");\n        xhr.send();\n    }\n\n    static getEvent(uid, callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let event = JSON.parse(xhr.responseText);\n\n            if (!event.submittable)\n                return;\n\n            callback(event);\n        };\n        xhr.open(\"GET\", hostname + \"/event/\" + uid);\n        xhr.send();\n    }\n\n    static postSubmission(submission, successCallback, failureCallback) {\n        let xhr = new XMLHttpRequest(),\n            urlEncodedData,\n            urlEncodedDataPairs = [];\n\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_uid\") + '=' + encodeURIComponent(submission.event_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_node_uid\") + '=' + encodeURIComponent(submission.event_node_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"submitter\") + '=' + encodeURIComponent(submission.submitter));\n        submission.drops.forEach((drop, key) => {\n            for (let field in drop) {\n                let value = typeof drop[field] === \"boolean\" ? Number(drop[field]) : encodeURIComponent(drop[field]);\n                urlEncodedDataPairs.push(\n                    encodeURIComponent(\"drops[\" + key + \"][\" + field + \"]\")\n                    + '='\n                    + value\n                );\n            }\n        });\n\n        urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');\n\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                let result = JSON.parse(xhr.responseText);\n\n                successCallback(result);\n            } else {\n                failureCallback(xhr.status);\n            }\n        };\n\n        xhr.onerror = function () {\n            failureCallback(xhr.status);\n        };\n\n        xhr.open(\"POST\", hostname + \"/submit/run\");\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(urlEncodedData);\n    }\n\n}\n\nexport default SubmissionsApi;","import Storage from \"./Storage\";\nimport SubmissionsApi from \"./SubmissionsApi\";\nimport Messages from \"./Messages\";\n\nconst successDelay = 2500;\nconst failureDelay = 20000;\nlet pending = false,\n    timer = null;\n\nclass SubmissionsQueue {\n\n    static hasQueued() {\n        let submission = Storage.getNextSubmission();\n\n        return submission !== null;\n    }\n\n    static push(submission, isMissingDropsCallback) {\n        let hasQueued = SubmissionsQueue.hasQueued();\n        Storage.queueSubmission(submission);\n\n        if (!hasQueued)\n            SubmissionsQueue.sendNext(isMissingDropsCallback);\n    }\n\n    static scheduleNext(success) {\n        if (pending)\n            return;\n\n        if (!SubmissionsQueue.hasQueued())\n            return;\n\n        pending = true;\n        timer = setTimeout(() => {\n            SubmissionsQueue.sendNext();\n        }, success ? successDelay : failureDelay);\n    }\n\n    static sendNext(isMissingDropsCallback) {\n        if (pending)\n            clearTimeout(timer);\n        pending = false;\n        timer = null;\n\n        let submission = Storage.getNextSubmission();\n\n        if (submission === null) {\n            SubmissionsQueue.scheduleNext(false);\n            return;\n        }\n\n        SubmissionsApi.postSubmission(submission, (result) => {\n            Messages.push(\"success\", \"Created new submission: \" + result.receipt);\n            Storage.shiftSubmissions();\n\n            if (result.missing_drops && isMissingDropsCallback)\n                isMissingDropsCallback();\n\n            SubmissionsQueue.scheduleNext(true);\n        }, (code) => {\n            if (code === 422) {\n                Messages.push(\"danger\", \"Invalid submission. Removing from queue.\");\n                Storage.shiftSubmissions();\n            }\n\n            SubmissionsQueue.scheduleNext(false);\n        });\n    }\n\n}\n\nexport default SubmissionsQueue;","import React from 'react';\nimport Drop from './Drop';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nclass DropBonus extends Drop {\n\n    render() {\n        let columns = \" \" + this.state.columns,\n            active = this.state.active ? \" active\" : \"\",\n            DropIcon = (\n                <img className=\"DropIcon\" draggable=\"false\"\n                     src={this.props.drop.image}\n                     alt={this.props.drop.name}\n                     onMouseDown={(e) => this.startIncrement(e, 1)}\n                     onMouseMove={(e) => this.checkMouseMove(e)}\n                     onMouseOut={(e) => this.stopIncrement()}\n                     onMouseUp={(e) => this.doMouseUp(1)}/>\n            ),\n            DropIndicator = <span className=\"DropIndicator\">BONUS%</span>,\n            DropInput = (\n                <Form.Control as=\"select\"\n                              size=\"sm\"\n                              className=\"DropInput\"\n                              value={this.state.count}\n                              onChange={(e) => this.changeCount(e)}>\n                    <option value={0}>0%</option>\n                    <option value={10}>10%</option>\n                    <option value={20}>20%</option>\n                    <option value={30}>30%</option>\n                    <option value={40}>40%</option>\n                    <option value={50}>50%</option>\n                    <option value={60}>60%</option>\n                    <option value={70}>70%</option>\n                    <option value={80}>80%</option>\n                    <option value={90}>90%</option>\n                    <option value={100}>100%</option>\n                </Form.Control>\n            ),\n            DropDecrement = (\n                <Button variant=\"primary\" block size=\"sm\"\n                        className=\"DropDecrement\"\n                        onMouseDown={(e) => this.startIncrement(e, -1)}\n                        onMouseMove={(e) => this.checkMouseMove(e)}\n                        onMouseOut={(e) => this.stopIncrement()}\n                        onMouseUp={(e) => this.doMouseUp(-1)}>\n                    <FontAwesomeIcon icon=\"minus\"/>\n                </Button>\n            ),\n            DropToggle = (\n                <div className=\"DropToggle\" onClick={(e) => this.toggleIgnored()}>\n                    <FontAwesomeIcon className=\"DropToggleIcon\"\n                                     icon={this.state.ignored ? \"ban\" : \"check\"}/>\n                </div>\n            );\n\n        return (\n            <div className={\"Drop DropBonus\" + columns + active}>\n                <div className=\"DropBorder\">\n                    <div className=\"DropContent\">\n                        <div className=\"DropIconBox\">\n                            {DropIcon}\n                            {DropIndicator}\n                        </div>\n                        {DropInput}\n                        {DropDecrement}\n                    </div>\n                    {DropToggle}\n                </div>\n            </div>\n        );\n    }\n\n    clear() {\n        // Do Nothing\n    }\n\n    doIncrement(amount) {\n        var result = 0 + this.state.count + (amount * 10);\n\n        if (result > 100)\n            result = 100;\n\n        this.setCount(result);\n\n        this.setState({active: true});\n        setTimeout(() => {\n            this.setState({active: false});\n        }, 50);\n\n        if (this.props.onClick)\n            this.props.onClick();\n    }\n\n}\n\nexport default DropBonus;\n","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Drop from \"./Drop\";\nimport \"./Node.css\";\nimport Storage from \"../lib/Storage\";\nimport Button from \"react-bootstrap/Button\";\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Howl} from 'howler';\nimport DropBonus from \"./DropBonus\";\n\nclass Node extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.dropRefs = [];\n        this.clickSound = new Howl({\n            src: \"./sounds/click.mp3\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Node\">\n                <div className=\"DropsContainer\">\n                    {this.renderDrops()}\n                </div>\n                <Row>\n                    <Col>\n                        <Button variant=\"primary\" block onClick={(e) => this.toggleFilter()}>\n                            <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"success\" block onClick={(e) => this.submit()}>\n                            <FontAwesomeIcon icon=\"copy\"/> Submit Run\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    renderDrops() {\n        return this.props.nodeDrops.map((nodeDrop, i) => {\n            let drop = this.props.drops.filter(drop => {\n                return drop.uid === nodeDrop.uid;\n            }).shift();\n\n            if (drop.type === \"Bonus Rate-Up\")\n                return <DropBonus key={i}\n                                  nodeDrop={nodeDrop}\n                                  drop={drop}\n                                  onClick={() => {\n                                      this.notifyClick();\n                                  }}\n                                  ref={input => {\n                                      this.dropRefs.push(input);\n                                  }}/>\n            else\n                return <Drop key={i}\n                             nodeDrop={nodeDrop}\n                             drop={drop}\n                             onClick={() => {\n                                 this.notifyClick();\n                             }}\n                             ref={input => {\n                                 this.dropRefs.push(input);\n                             }}/>\n        });\n    }\n\n    clearDrops() {\n        this.dropRefs.forEach(drop => {\n            drop.clear();\n        });\n    }\n\n    notifyClick() {\n        this.clickSound.play();\n\n        if (window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    toggleFilter() {\n        this.dropRefs.forEach(drop => {\n            drop.toggleFilter();\n        });\n    }\n\n    submit() {\n        let payload = {\n            event_uid: this.props.node.event_uid,\n            event_node_uid: this.props.node.uid,\n            submitter: Storage.getSubmitterName(),\n            drops: this.dropRefs.map(drop => {\n                return drop.getState();\n            })\n        };\n\n        SubmissionsQueue.push(payload, () => {\n            if (this.props.onOutdated)\n                this.props.onOutdated();\n        });\n        Storage.clearNodeSession(this.props.node.event_uid, this.props.node.uid);\n        this.clearDrops();\n    }\n}\n\nexport default Node;","class Query {\n\n    static get(param) {\n        return Query.urlParams().has(param) ? Query.urlParams().get(param) : \"\";\n    }\n\n    static getEvent() {\n        return Query.get(\"event\");\n    }\n\n    static getNode() {\n        return Query.get(\"node\");\n    }\n\n    static setEvent(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"event\", uid);\n        else\n            params.delete(\"event\");\n\n        params.delete(\"node\");\n        Query.update(\"?\" + params.toString());\n    }\n\n    static setNode(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"node\", uid);\n        else\n            params.delete(\"node\");\n\n        Query.update(\"?\" + params.toString());\n    }\n\n    static update(query) {\n        let newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + query;\n        window.history.replaceState({path: newurl}, '', newurl);\n    }\n\n    static urlParams() {\n        return new URLSearchParams(window.location.search);\n    }\n\n}\n\nexport default Query;","import unique from \"array-unique\";\nimport React from 'react';\nimport Node from \"./Node\";\nimport Query from \"../lib/Query\";\nimport \"./Event.css\";\nimport Form from \"react-bootstrap/Form\";\n\nclass Event extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.selectNode = this.selectNode.bind(this);\n\n        this.nodeKey = 0;\n        this.state = this.extractNode(Query.getNode());\n    }\n\n    extractNode(uid) {\n        let node = this.props.event.nodes.filter(node => {\n                return node.uid === uid;\n            }).pop(),\n            nodeDrops = this.props.event.node_drops.filter(drop => {\n                return drop.event_node_uid === uid;\n            }).sort(((a, b) => {\n                return a.sort - b.sort;\n            })),\n            dropUids = unique(nodeDrops.map(drop => {\n                return drop.uid;\n            })),\n            drops = this.props.event.drops.filter(drop => {\n                return dropUids.indexOf(drop.uid) !== -1;\n            });\n\n        return {\n            selectedNode: uid,\n            node: node,\n            nodeDrops: nodeDrops,\n            drops: drops\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"Event\">\n                {this.renderNodeSelector()}\n                {this.renderNode()}\n            </div>\n        );\n    }\n\n    renderNode() {\n        if (!this.state.selectedNode)\n            return;\n\n        return <Node key={this.nodeKey}\n                     node={this.state.node}\n                     nodeDrops={this.state.nodeDrops}\n                     drops={this.state.drops}\n                     onOutdated={this.props.onOutdated}/>\n    }\n\n    renderNodeSelector() {\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a node</option>\n            ].concat(this.props.event.nodes.map(node => {\n                return <option key={i++} value={node.uid}>{node.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"NodeSelector custom-select\"\n                          onChange={this.selectNode}\n                          value={this.state.selectedNode}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    selectNode(event) {\n        this.nodeKey++;\n        let uid = event.target.value;\n        Query.setNode(uid);\n\n        this.setState(this.extractNode(uid));\n    }\n}\n\nexport default Event;","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Storage from \"../lib/Storage\";\n\nclass Setting extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: !Storage.getSubmitterName(),\n            settings: Storage.getSettings(),\n            submitter_name: Storage.getSubmitterName()\n        };\n    }\n\n    render() {\n        return (\n            <Modal show={this.state.show} onHide={e => this.handleClose()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Settings</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group controlId=\"settingSubmitterName\">\n                        <Form.Label>Submitter Name</Form.Label>\n                        <Form.Control value={this.state.submitter_name}\n                                      onChange={e => this.setSubmitterName(e.target.value)}\n                                      ref={(input) => {\n                                          this.submitterInput = input;\n                                      }}/>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"settingAppWidth\">\n                        <Form.Label>App Width</Form.Label>\n                        <Form.Control as=\"select\"\n                                      value={this.state.settings.width}\n                                      onChange={e => this.setAppWidth(e.target.value)}>\n                            <option value=\"width_full\">Full Width</option>\n                            <option value=\"width_480\">480px</option>\n                            <option value=\"width_720\">720px</option>\n                            <option value=\"width_1080\">1080p</option>\n                            <option value=\"width_2160\">2160p</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"settingNumberOfColumns\">\n                        <Form.Label>Number of Columns</Form.Label>\n                        <Form.Control as=\"select\"\n                                      value={this.state.settings.columns}\n                                      onChange={e => this.setNumberOfColumns(e.target.value)}>\n                            <option value=\"columns_auto\">Auto</option>\n                            <option value=\"columns_2\">2</option>\n                            <option value=\"columns_4\">4</option>\n                            <option value=\"columns_6\">6</option>\n                            <option value=\"columns_8\">8</option>\n                            <option value=\"columns_12\">12</option>\n                            <option value=\"columns_16\">16</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    componentDidMount() {\n        if (!Storage.getSubmitterName())\n            this.submitterInput.focus();\n    }\n\n    handleClose() {\n        this.setState({show: false});\n    }\n\n    setAppWidth(value) {\n        Storage.setSettings(\"width\", value);\n        this.setState({\n            settings: Storage.getSettings()\n        });\n    }\n\n    setNumberOfColumns(value) {\n        Storage.setSettings(\"columns\", value);\n        this.setState({\n            settings: Storage.getSettings()\n        });\n    }\n\n    setSubmitterName(name) {\n        Storage.setSubmitterName(name);\n        this.setState({\n            \"submitter_name\": Storage.getSubmitterName()\n        });\n    }\n\n    toggle() {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n}\n\nexport default Setting;\n","import React, {Component} from 'react';\nimport Alerts from \"./Alerts\";\nimport Button from \"react-bootstrap/Button\";\nimport Event from \"./Event\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Form from \"react-bootstrap/Form\";\nimport Query from \"../lib/Query\";\nimport Setting from \"./Setting\";\nimport SubmissionsApi from \"../lib/SubmissionsApi\";\nimport './App.css';\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\nimport Messages from \"../lib/Messages\";\nimport Storage from \"../lib/Storage\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.selectEvent = this.selectEvent.bind(this);\n\n        this.state = {\n            isLoadingEvents: true,\n            isLoadingEvent: false,\n            eventsData: [],\n            eventData: null,\n            selectedEvent: Query.getEvent(),\n            width: Storage.getSettings().width\n        };\n\n        Storage.onUpdateSettings(() => {\n            this.refreshSettings();\n        });\n\n        SubmissionsApi.getEvents(events => {\n            this.setState({\n                isLoadingEvents: false,\n                isLoadingEvent: this.state.selectedEvent.length > 0,\n                eventsData: events\n            });\n\n            if (this.state.selectedEvent.length > 0) {\n                SubmissionsApi.getEvent(this.state.selectedEvent, event => {\n                    this.setState({\n                        isLoadingEvent: false,\n                        eventData: event\n                    });\n                });\n            }\n        });\n\n        SubmissionsQueue.scheduleNext(true);\n    }\n\n    render() {\n        return (\n            <div className={\"App \" + this.state.width}>\n                <div className=\"AppTitle\">\n                    <h1>\n                        Drop Serializer\n                        <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                    </h1>\n                    <Button variant=\"primary\" className=\"AppSettingsToggle\"\n                            onClick={e => this.setting.toggle()}>\n                        <FontAwesomeIcon icon=\"cog\"/>\n                    </Button>\n\n                    <div className=\"AppLinks\">\n                        <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                           className=\"text-secondary\"\n                           target=\"_blank\" rel=\"noopener noreferrer author\">\n                            <FontAwesomeIcon icon={['fab', 'github']}/>\n                        </a>\n                        <a href=\"https://discord.gg/TKJmuCR\"\n                           className=\"text-secondary\"\n                           target=\"_blank\" rel=\"noopener noreferrer author\">\n                            <FontAwesomeIcon icon={['fab', 'discord']}/>\n                        </a>\n                    </div>\n                </div>\n\n                <Alerts/>\n                {this.renderEventSelector()}\n                {this.renderEvent()}\n                {this.renderSettings()}\n                {this.renderLoading()}\n            </div>\n        );\n    }\n\n    refreshSettings() {\n        this.setState({\n            width: Storage.getSettings().width\n        });\n    }\n\n    reloadEvent() {\n        Messages.push(\"warning\", \"Event is outdated. Reloading event.\");\n\n        this.setState({\n            isLoadingEvent: true,\n            eventData: null\n        });\n\n        SubmissionsApi.getEvent(this.state.selectedEvent, event => {\n            this.setState({\n                isLoadingEvent: false,\n                eventData: event\n            });\n        });\n    }\n\n    renderEvent() {\n        if (!this.state.selectedEvent || !this.state.eventData)\n            return;\n\n        return <Event event={this.state.eventData}\n                      selected={this.state.selectedEvent}\n                      onOutdated={() => {\n                          this.reloadEvent();\n                      }}/>;\n    }\n\n    renderEventSelector() {\n        if (this.state.isLoadingEvents)\n            return;\n\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a event</option>\n            ].concat(this.state.eventsData.map(event => {\n                return <option key={i++} value={event.uid}>{event.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"EventSelector\"\n                          onChange={this.selectEvent}\n                          value={this.state.selectedEvent}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    renderLoading() {\n        if (this.state.isLoadingEvents || this.state.isLoadingEvent)\n            return (\n                <div className=\"AppLoading\">\n                    <div className=\"AppLoadingContent\">\n                        <FontAwesomeIcon icon=\"spinner\" spin/>\n                    </div>\n                </div>\n            );\n    }\n\n    renderSettings() {\n        return (\n            <Setting ref={(input) => {\n                this.setting = input;\n            }} onChange={() => {\n                this.refreshSettings();\n            }}/>\n        );\n    }\n\n    selectEvent(event) {\n        let uid = event.target.value;\n\n        Query.setEvent(uid);\n        this.setState({\n            isLoadingEvent: false,\n            eventData: null,\n            selectedEvent: uid\n        });\n\n        if (!uid)\n            return;\n\n        this.setState({\n            isLoadingEvent: true\n        });\n\n        SubmissionsApi.getEvent(uid, event => {\n            this.setState({\n                isLoadingEvent: false,\n                eventData: event\n            });\n        })\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faBan, faCheck, faCog, faCopy, faFilter, faMinus, faSpinner, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}