{"version":3,"sources":["lib/Messages.js","components/Alerts.js","lib/Storage.js","components/Drop.js","lib/SubmissionsApi.js","lib/SubmissionsQueue.js","components/Node.js","lib/Query.js","components/Event.js","components/Setting.js","components/App.js","serviceWorker.js","index.js"],"names":["listener","Messages","type","message","callback","Alerts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","alerts","push","bind","assertThisInitialized","registerListener","map","alert","key","react_default","a","createElement","Alert_default","variant","className","_this2","JSON","parse","stringify","setState","setTimeout","shiftAlerts","slice","Component","Storage","eventUid","eventNodeUid","makeNodeSessionKey","window","localStorage","removeItem","submissions","getSubmissions","length","shift","nodeSession","getItem","dropUid","dropQuantity","getNodeSession","defaultNodeDrop","uid","quantity","count","ignored","nodeDrop","filter","undefined","submissionsRaw","submitterName","submission","setItem","filteredSession","sessionNodeDrop","name","Drop","increment","interval","intervalSkips","iterator","pointerLeash","pointerX","pointerY","running","timer","windowLeash","windowListener","windowPosition","getSessionNodeDrop","event_uid","event_node_uid","DropIcon","draggable","src","drop","image","alt","onMouseDown","e","startIncrement","onMouseMove","checkMouseMove","onMouseOut","stopIncrement","onMouseUp","doMouseUp","DropIndicator","DropQuantity","DropInput","Form_default","Control","value","onChange","changeCount","DropDecrement","Button_default","block","size","index_es","icon","event","setCount","target","x","clientX","y","clientY","w","Math","abs","h","amount","setSessionNodeDrop","t","setInterval","scrollY","addEventListener","clearInterval","removeEventListener","React","hostname","XMLHttpRequest","require","SubmissionsApi","xhr","onload","submittableEvents","responseText","submittable","open","send","successCallback","failureCallback","urlEncodedData","urlEncodedDataPairs","encodeURIComponent","submitter","drops","forEach","field","Number","join","replace","result","onerror","setRequestHeader","pending","SubmissionsQueue","getNextSubmission","hasQueued","queueSubmission","sendNext","success","clearTimeout","postSubmission","receipt","shiftSubmissions","scheduleNext","Node","dropRefs","renderDrops","onClick","submit","_this3","nodeDrops","i","src_components_Drop","ref","input","payload","node","getSubmitterName","getState","clearNodeSession","clearDrops","Query","param","urlParams","has","get","params","set","delete","update","toString","query","newurl","location","protocol","host","pathname","history","replaceState","path","URLSearchParams","search","Event","selectNode","extractNode","getNode","nodes","pop","node_drops","sort","b","dropUids","unique","indexOf","selectedNode","renderNodeSelector","renderNode","src_components_Node","options","concat","as","setNode","Setting","show","submitter_name","Modal_default","onHide","handleClose","Header","closeButton","Title","Body","Group","controlId","Label","setSubmitterName","App","selectEvent","isLoadingEvents","isLoadingEvent","eventsData","eventData","selectedEvent","getEvent","getEvents","events","href","setting","toggle","src_components_Alerts","renderEventSelector","renderEvent","renderSettings","renderLoading","src_components_Event","selected","spin","components_Setting","refreshSettings","_this4","setEvent","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","library","add","faCog","faCopy","faMinus","faSpinner","faTrashAlt","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0aa018b4.chunk.js","sourcesContent":["let listener;\n\nclass Messages {\n\n    static push(type, message) {\n        listener(type, message);\n    }\n\n    static registerListener(callback) {\n        listener = callback;\n    }\n\n}\n\nexport default Messages;","import React, {Component} from 'react';\nimport Alert from \"react-bootstrap/Alert\";\nimport \"./Alerts.css\";\nimport Messages from \"../lib/Messages\";\n\nclass Alerts extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            alerts: []\n        };\n\n        this.push = this.push.bind(this);\n        Messages.registerListener(this.push);\n    }\n\n    render() {\n        let alerts = this.state.alerts.map((alert, key) => {\n            return <Alert key={key} variant={alert.type}>{alert.message}</Alert>;\n        });\n\n        return (\n            <div className=\"Alerts\">\n                {alerts}\n            </div>\n        );\n    }\n\n    push(type, message) {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        alerts.push({\n            type: type,\n            message: message\n        });\n\n        this.setState({\n            alerts: alerts\n        });\n\n        setTimeout(() => {\n            this.shiftAlerts();\n        }, 5000);\n    }\n\n    shiftAlerts() {\n        let alerts = JSON.parse(JSON.stringify(this.state.alerts));\n\n        this.setState({\n            alerts: alerts.slice(1)\n        });\n    }\n}\n\nexport default Alerts;\n","class Storage {\n\n    static clearNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid);\n\n        window.localStorage.removeItem(key);\n    }\n\n    static getNextSubmission() {\n        let submissions = Storage.getSubmissions();\n\n        if (submissions.length === 0)\n            return null;\n\n        return submissions.shift();\n    }\n\n    static getNodeSession(eventUid, eventNodeUid) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = window.localStorage.getItem(key);\n\n        if (nodeSession === null)\n            return [];\n\n        return JSON.parse(nodeSession);\n    }\n\n    static getSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity) {\n        let nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            defaultNodeDrop = {\n                uid: dropUid,\n                quantity: dropQuantity,\n                count: 0,\n                ignored: false\n            };\n\n        let nodeDrop = nodeSession.filter(nodeDrop => {\n            return nodeDrop.uid === dropUid\n                && nodeDrop.quantity === dropQuantity;\n        }).shift();\n\n        if (nodeDrop === undefined)\n            return defaultNodeDrop;\n\n        return nodeDrop;\n    }\n\n    static getSubmissions() {\n        let submissionsRaw = window.localStorage.getItem(\"submissions\");\n\n        return submissionsRaw === null ? [] : JSON.parse(submissionsRaw);\n    }\n\n    static getSubmitterName() {\n        let submitterName = window.localStorage.getItem(\"submitter_name\");\n\n        return submitterName === null ? \"\" : submitterName;\n    }\n\n    static makeNodeSessionKey(eventUid, eventNodeUid) {\n        return \"event_\" + eventUid + \"_node_\" + eventNodeUid;\n    }\n\n    static queueSubmission(submission) {\n        let submissions = Storage.getSubmissions();\n\n        submissions.push(submission);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n    static setSessionNodeDrop(eventUid, eventNodeUid, dropUid, dropQuantity, count, ignored) {\n        let key = Storage.makeNodeSessionKey(eventUid, eventNodeUid),\n            nodeSession = Storage.getNodeSession(eventUid, eventNodeUid),\n            filteredSession = nodeSession.filter(sessionNodeDrop => {\n                return sessionNodeDrop.uid !== dropUid\n                    || sessionNodeDrop.quantity !== dropQuantity;\n            });\n\n        filteredSession.push({\n            uid: dropUid,\n            quantity: dropQuantity,\n            count: count,\n            ignored: ignored\n        });\n\n        window.localStorage.setItem(key, JSON.stringify(filteredSession));\n    }\n\n    static setSubmitterName(name) {\n        window.localStorage.setItem(\"submitter_name\", name);\n    }\n\n    static shiftSubmissions() {\n        let submissions = Storage.getSubmissions().slice(1);\n\n        window.localStorage.setItem(\"submissions\", JSON.stringify(submissions));\n    }\n\n}\n\nexport default Storage;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Storage from \"../lib/Storage\";\nimport \"./Drop.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.increment = {\n            interval: 250,\n            intervalSkips: 3,\n            iterator: 0,\n            pointerLeash: 10,\n            pointerX: null,\n            pointerY: null,\n            running: false,\n            timer: null,\n            windowLeash: 10,\n            windowListener: null,\n            windowPosition: null\n        };\n        this.state = Storage.getSessionNodeDrop(\n            props.nodeDrop.event_uid,\n            props.nodeDrop.event_node_uid,\n            props.nodeDrop.uid,\n            props.nodeDrop.quantity\n        );\n    }\n\n    render() {\n        let DropIcon = (\n                <img className=\"DropIcon\" draggable=\"false\"\n                     src={this.props.drop.image}\n                     alt={this.props.drop.name}\n                     onMouseDown={(e) => this.startIncrement(e, 1)}\n                     onMouseMove={(e) => this.checkMouseMove(e)}\n                     onMouseOut={(e) => this.stopIncrement()}\n                     onMouseUp={(e) => this.doMouseUp(1)}/>\n            ),\n            DropIndicator = <span className=\"DropIndicator\">+</span>,\n            DropQuantity = (\n                this.props.nodeDrop.quantity > 1\n                    ? <span className=\"DropQuantity\">{this.props.nodeDrop.quantity}</span>\n                    : \"\"\n            ),\n            DropInput = (\n                <Form.Control type=\"text\"\n                              className=\"DropInput form-control form-control-sm\"\n                              value={this.state.count}\n                              onChange={(e) => this.changeCount(e)}/>\n            ),\n            DropDecrement = (\n                <Button variant=\"primary\" block size=\"sm\"\n                        className=\"DropDecrement\"\n                        onMouseDown={(e) => this.startIncrement(e, -1)}\n                        onMouseMove={(e) => this.checkMouseMove(e)}\n                        onMouseOut={(e) => this.stopIncrement()}\n                        onMouseUp={(e) => this.doMouseUp(-1)}>\n                    <FontAwesomeIcon icon=\"minus\"/>\n                </Button>\n            );\n\n        return (\n            <div className=\"Drop\">\n                <div className=\"DropBorder\">\n                    <div className=\"DropContent\">\n                        <div className=\"DropIconBox\">\n                            {DropIcon}\n                            {DropIndicator}\n                            {DropQuantity}\n                        </div>\n                        {DropInput}\n                        {DropDecrement}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    changeCount(event) {\n        this.setCount(event.target.value);\n    }\n\n    checkMouseMove(e) {\n        if (!this.increment.running)\n            return;\n\n        let x = e.clientX,\n            y = e.clientY,\n            w = Math.abs(x - this.increment.pointerX),\n            h = Math.abs(y - this.increment.pointerY);\n\n        if (w > this.increment.pointerLeash || h > this.increment.pointerLeash)\n            this.stopIncrement();\n    }\n\n    doMouseUp(amount) {\n        if (!this.increment.running)\n            return;\n\n        if (this.increment.iterator <= this.increment.intervalSkips)\n            this.setCount(this.state.count + amount);\n\n        this.stopIncrement();\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    setCount(value) {\n        Storage.setSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity,\n            value,\n            false\n        );\n\n        this.setState(Storage.getSessionNodeDrop(\n            this.props.nodeDrop.event_uid,\n            this.props.nodeDrop.event_node_uid,\n            this.props.nodeDrop.uid,\n            this.props.nodeDrop.quantity\n        ));\n    }\n\n    startIncrement(e, amount) {\n        this.stopIncrement();\n\n        let t = this;\n        this.increment.iterator = 0;\n        this.increment.pointerX = e.clientX;\n        this.increment.pointerY = e.clientY;\n\n        this.increment.timer = setInterval(function () {\n            if (t.increment.iterator > t.increment.intervalSkips)\n                t.setCount(t.state.count + amount);\n\n            t.increment.iterator++;\n        }, this.increment.interval);\n        this.increment.windowPosition = window.scrollY;\n        this.increment.windowListener = function (e) {\n            let diff = Math.abs(window.scrollY - t.increment.windowPosition);\n\n            if (diff > t.increment.windowLeash)\n                t.stopIncrement();\n        };\n        window.addEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.running = true;\n    }\n\n    stopIncrement() {\n        if (!this.increment.running)\n            return;\n\n        clearInterval(this.increment.timer);\n        window.removeEventListener(\"scroll\", this.increment.windowListener);\n        this.increment.timer = null;\n        this.increment.windowListener = null;\n        this.increment.running = false;\n    }\n}\n\nexport default Drop;","const hostname = \"https://submissions.atlasacademy.io\";\n// const hostname = \"http://submissions.test.atlasacademy.io\";\nconst XMLHttpRequest = require(\"xmlhttprequest-ssl\").XMLHttpRequest;\n\nclass SubmissionsApi {\n\n    static getEvents(callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let events = JSON.parse(xhr.responseText),\n                submittableEvents = events.filter(event => {\n                    return event.submittable;\n                });\n\n            callback(submittableEvents);\n        };\n        xhr.open(\"GET\", hostname + \"/event\");\n        xhr.send();\n    }\n\n    static getEvent(uid, callback) {\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            let event = JSON.parse(xhr.responseText);\n\n            if (!event.submittable)\n                return;\n\n            callback(event);\n        };\n        xhr.open(\"GET\", hostname + \"/event/\" + uid);\n        xhr.send();\n    }\n\n    static postSubmission(submission, successCallback, failureCallback) {\n        let xhr = new XMLHttpRequest(),\n            urlEncodedData,\n            urlEncodedDataPairs = [];\n\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_uid\") + '=' + encodeURIComponent(submission.event_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"event_node_uid\") + '=' + encodeURIComponent(submission.event_node_uid));\n        urlEncodedDataPairs.push(encodeURIComponent(\"submitter\") + '=' + encodeURIComponent(submission.submitter));\n        submission.drops.forEach((drop, key) => {\n            for (let field in drop) {\n                let value = typeof drop[field] === \"boolean\" ? Number(drop[field]) : encodeURIComponent(drop[field]);\n                urlEncodedDataPairs.push(\n                    encodeURIComponent(\"drops[\" + key + \"][\" + field + \"]\")\n                    + '='\n                    + value\n                );\n            }\n        });\n\n        urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');\n\n        xhr.onload = function () {\n            let result = JSON.parse(xhr.responseText);\n\n            successCallback(result);\n        };\n\n        xhr.onerror = function () {\n            failureCallback();\n        };\n\n        xhr.open(\"POST\", hostname + \"/submit/run\");\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(urlEncodedData);\n    }\n\n}\n\nexport default SubmissionsApi;","import Storage from \"./Storage\";\nimport SubmissionsApi from \"./SubmissionsApi\";\nimport Messages from \"./Messages\";\n\nconst successDelay = 2500;\nconst failureDelay = 20000;\nlet pending = false,\n    timer = null;\n\nclass SubmissionsQueue {\n\n    static hasQueued() {\n        let submission = Storage.getNextSubmission();\n\n        return submission !== null;\n    }\n\n    static push(submission) {\n        let hasQueued = SubmissionsQueue.hasQueued();\n        Storage.queueSubmission(submission);\n\n        if (!hasQueued)\n            SubmissionsQueue.sendNext();\n    }\n\n    static scheduleNext(success) {\n        if (pending)\n            return;\n\n        if (!SubmissionsQueue.hasQueued())\n            return;\n\n        pending = true;\n        timer = setTimeout(() => {\n            SubmissionsQueue.sendNext();\n        }, success ? successDelay : failureDelay);\n    }\n\n    static sendNext() {\n        if (pending)\n            clearTimeout(timer);\n        pending = false;\n        timer = null;\n\n        let submission = Storage.getNextSubmission();\n\n        if (submission === null) {\n            SubmissionsQueue.scheduleNext(false);\n            return;\n        }\n\n        SubmissionsApi.postSubmission(submission, (result) => {\n            Messages.push(\"success\", \"Created new submission: \" + result.receipt);\n            Storage.shiftSubmissions();\n\n            SubmissionsQueue.scheduleNext(true);\n        }, () => {\n            SubmissionsQueue.scheduleNext(false);\n        });\n    }\n\n}\n\nexport default SubmissionsQueue;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Drop from \"./Drop\";\nimport \"./Node.css\";\nimport Storage from \"../lib/Storage\";\nimport Button from \"react-bootstrap/Button\";\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\n\nclass Node extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.dropRefs = [];\n    }\n\n    render() {\n        return (\n            <div className=\"Node\">\n                <div className=\"DropsContainer\">\n                    {this.renderDrops()}\n                </div>\n                <Button variant=\"success\" block onClick={(e) => this.submit()}>\n                    <FontAwesomeIcon icon=\"copy\"/> Submit Run\n                </Button>\n            </div>\n        );\n    }\n\n    renderDrops() {\n        return this.props.nodeDrops.map((nodeDrop, i) => {\n            let drop = this.props.drops.filter(drop => {\n                    return drop.uid === nodeDrop.uid;\n                }).shift();\n\n            return <Drop key={i}\n                         nodeDrop={nodeDrop} drop={drop}\n                         ref={input => {\n                             this.dropRefs.push(input);\n                         }}/>\n        });\n    }\n\n    clearDrops() {\n        this.dropRefs.forEach(drop => {\n            drop.setCount(0);\n        });\n    }\n\n    submit() {\n        let payload = {\n            event_uid: this.props.node.event_uid,\n            event_node_uid: this.props.node.uid,\n            submitter: Storage.getSubmitterName(),\n            drops: this.dropRefs.map(drop => {\n                return drop.getState();\n            })\n        };\n\n        SubmissionsQueue.push(payload);\n        Storage.clearNodeSession(this.props.node.event_uid, this.props.node.uid);\n        this.clearDrops();\n    }\n}\n\nexport default Node;","class Query {\n\n    static get(param) {\n        return Query.urlParams().has(param) ? Query.urlParams().get(param) : \"\";\n    }\n\n    static getEvent() {\n        return Query.get(\"event\");\n    }\n\n    static getNode() {\n        return Query.get(\"node\");\n    }\n\n    static setEvent(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"event\", uid);\n        else\n            params.delete(\"event\");\n\n        params.delete(\"node\");\n        Query.update(\"?\" + params.toString());\n    }\n\n    static setNode(uid) {\n        let params = Query.urlParams();\n\n        if (uid)\n            params.set(\"node\", uid);\n        else\n            params.delete(\"node\");\n\n        Query.update(\"?\" + params.toString());\n    }\n\n    static update(query) {\n        let newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + query;\n        window.history.replaceState({path: newurl}, '', newurl);\n    }\n\n    static urlParams() {\n        return new URLSearchParams(window.location.search);\n    }\n\n}\n\nexport default Query;","import unique from \"array-unique\";\nimport React from 'react';\nimport Node from \"./Node\";\nimport Query from \"../lib/Query\";\nimport \"./Event.css\";\nimport Form from \"react-bootstrap/Form\";\n\nclass Event extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.selectNode = this.selectNode.bind(this);\n\n        this.state = this.extractNode(Query.getNode());\n    }\n\n    extractNode(uid) {\n        let node = this.props.event.nodes.filter(node => {\n                return node.uid === uid;\n            }).pop(),\n            nodeDrops = this.props.event.node_drops.filter(drop => {\n                return drop.event_node_uid === uid;\n            }).sort(((a, b) => {\n                return a.sort - b.sort;\n            })),\n            dropUids = unique(nodeDrops.map(drop => {\n                return drop.uid;\n            })),\n            drops = this.props.event.drops.filter(drop => {\n                return dropUids.indexOf(drop.uid) !== -1;\n            });\n\n        return {\n            selectedNode: uid,\n            node: node,\n            nodeDrops: nodeDrops,\n            drops: drops\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"Event\">\n                {this.renderNodeSelector()}\n                {this.renderNode()}\n            </div>\n        );\n    }\n\n    renderNode() {\n        if (!this.state.selectedNode)\n            return;\n\n        return <Node node={this.state.node} nodeDrops={this.state.nodeDrops} drops={this.state.drops}/>\n    }\n\n    renderNodeSelector() {\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a node</option>\n            ].concat(this.props.event.nodes.map(node => {\n                return <option key={i++} value={node.uid}>{node.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"NodeSelector custom-select\"\n                          onChange={this.selectNode}\n                          value={this.state.selectedNode}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    selectNode(event) {\n        let uid = event.target.value;\n        Query.setNode(uid);\n\n        this.setState(this.extractNode(uid));\n    }\n}\n\nexport default Event;","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Storage from \"../lib/Storage\";\n\nclass Setting extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n            submitter_name: Storage.getSubmitterName()\n        };\n    }\n\n    render() {\n        return (\n            <Modal show={this.state.show} onHide={e => this.handleClose()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Settings</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group controlId=\"settingSubmitterName\">\n                        <Form.Label>Submitter Name</Form.Label>\n                        <Form.Control value={this.state.submitter_name}\n                                      onChange={e => this.setSubmitterName(e.target.value)}/>\n                    </Form.Group>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    setSubmitterName(name) {\n        Storage.setSubmitterName(name);\n        this.setState({\n            \"submitter_name\": Storage.getSubmitterName()\n        });\n    }\n\n    toggle() {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n}\n\nexport default Setting;\n","import React, {Component} from 'react';\nimport Alerts from \"./Alerts\";\nimport Button from \"react-bootstrap/Button\";\nimport Event from \"./Event\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Form from \"react-bootstrap/Form\";\nimport Query from \"../lib/Query\";\nimport Setting from \"./Setting\";\nimport SubmissionsApi from \"../lib/SubmissionsApi\";\nimport './App.css';\nimport SubmissionsQueue from \"../lib/SubmissionsQueue\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.selectEvent = this.selectEvent.bind(this);\n\n        this.state = {\n            isLoadingEvents: true,\n            isLoadingEvent: false,\n            eventsData: [],\n            eventData: null,\n            selectedEvent: Query.getEvent()\n        };\n\n        SubmissionsApi.getEvents(events => {\n            this.setState({\n                isLoadingEvents: false,\n                isLoadingEvent: this.state.selectedEvent.length > 0,\n                eventsData: events\n            });\n\n            if (this.state.selectedEvent.length > 0) {\n                SubmissionsApi.getEvent(this.state.selectedEvent, event => {\n                    this.setState({\n                        isLoadingEvent: false,\n                        eventData: event\n                    });\n                });\n            }\n        });\n\n        SubmissionsQueue.scheduleNext(true);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"AppTitle\">\n                    <h1>\n                        Drop Serializer\n                        <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                    </h1>\n                    <Button variant=\"info\" className=\"AppSettingsToggle\"\n                            onClick={e => this.setting.toggle()}>\n                        <FontAwesomeIcon icon=\"cog\"/>\n                    </Button>\n                </div>\n\n                <Alerts/>\n                {this.renderEventSelector()}\n                {this.renderEvent()}\n                {this.renderSettings()}\n                {this.renderLoading()}\n            </div>\n        );\n    }\n\n    refreshSettings() {\n\n    }\n\n    renderEvent() {\n        if (!this.state.selectedEvent || !this.state.eventData)\n            return;\n\n        return <Event event={this.state.eventData} selected={this.state.selectedEvent}/>;\n    }\n\n    renderEventSelector() {\n        if (this.state.isLoadingEvents)\n            return;\n\n        let i = 0,\n            options = [\n                <option key={i++} value={\"\"}>Select a event</option>\n            ].concat(this.state.eventsData.map(event => {\n                return <option key={i++} value={event.uid}>{event.name}</option>\n            }));\n\n        return (\n            <Form.Control as=\"select\"\n                          className=\"EventSelector\"\n                          onChange={this.selectEvent}\n                          value={this.state.selectedEvent}>\n                {options}\n            </Form.Control>\n        );\n    }\n\n    renderLoading() {\n        if (this.state.isLoadingEvents || this.state.isLoadingEvent)\n            return (\n                <div className=\"AppLoading\">\n                    <div className=\"AppLoadingContent\">\n                        <FontAwesomeIcon icon=\"spinner\" spin/>\n                    </div>\n                </div>\n            );\n    }\n\n    renderSettings() {\n        return (\n            <Setting ref={(input) => {\n                this.setting = input;\n            }} onChange={() => {\n                this.refreshSettings();\n            }}/>\n        );\n    }\n\n    selectEvent(event) {\n        let uid = event.target.value;\n\n        Query.setEvent(uid);\n        this.setState({\n            isLoadingEvent: false,\n            eventData: null,\n            selectedEvent: uid\n        });\n\n        if (!uid)\n            return;\n\n        this.setState({\n            isLoadingEvent: true\n        });\n\n        SubmissionsApi.getEvent(uid, event => {\n            this.setState({\n                isLoadingEvent: false,\n                eventData: event\n            });\n        })\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faCog, faCopy, faMinus, faSpinner, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}