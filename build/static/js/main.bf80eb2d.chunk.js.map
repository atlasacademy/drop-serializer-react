{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/query.js","redux/thunks/select.js","redux/thunks/submission.js","redux/thunks/load.js","components/Button/SheetButton.js","components/Button/SubmitButton.js","components/Button/ToggleFilterButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","components/Message/Message.js","components/Message/PendingSubmissions.js","components/Message/Messages.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Upload/UploadButton.js","components/Upload/UploadModal.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["pushMessage","type","message","payload","setEvent","setEventData","setShowSettings","setShowUpload","setSubmissionPending","updateLoading","setQuery","eventUid","nodeUid","dispatch","getState","dropSerializer","enableQueryParameters","location","window","params","URLSearchParams","search","set","delete","newUrl","protocol","host","pathname","toString","history","replaceState","path","selectEvent","uid","eventData","Promise","resolve","then","fetchEvent","selectNode","selectedEvent","sendNext","submissionQueue","submissionPending","length","submission","submit","event_uid","domain","axios","post","response","data","receipt","reloadOutdatedEventData","missing_drops","catch","error","status","setTimeout","submissionEventUid","missingDrops","selectedNode","fetchEvents","enableEventSelector","get","SheetButton","this","props","eventLoaded","href","sheetLink","className","target","rel","icon","React","Component","connect","state","eventList","Boolean","sheet_id","SubmitButton","delay","disabled","timeout","clearTimeout","setState","Button","variant","block","onClick","e","src","dropCount","settings","submissionDrops","nodeDrops","node_drops","filter","nodeDrop","event_node_uid","submitterName","submitter_name","drops","map","drop","submissionDrop","quantity","shift","count","ignored","submitter","token","uuidv1","reduce","a","b","ToggleFilterButton","showFilters","mapStateToProps","ownProps","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","quantityDisplay","undefined","mapDispatchToProps","update","updateDrop","reduxConnect","DropCount","Form","Control","value","onChange","size","parseInt","isNaN","_DropReduxConnector","Click","Howl","_DropIncrementor","incrementorSettings","defaultSettings","iteratorSkip","max","min","step","windowLeash","interval","iterator","running","windowPosition","windowListener","stopInterval","startInterval","stepCount","Math","abs","scrollY","parent","animate","click","play","vibrate","navigator","setInterval","tick","onWindowScroll","addEventListener","clearInterval","removeEventListener","dropState","DropDecrement","tabIndex","onMouseDown","onMouseMove","onMouseOut","onMouseUp","_DropIncrementorReduxConnector","DropIcon","draggable","image","alt","name","DropToggle","DropIndicator","isSelected","difference","indicator","Drop","animating","columns","DropBonusCount","as","Array","keys","i","key","DropBonusIcon","DropBonusDecrement","DropBonus","DropContainer","makeNodeDropKey","Message","Alert","PendingSubmissions","pendingCount","Messages","messages","EventSelector","updateEvent","concat","event","NodeSelector","updateNode","nodeList","node","nodes","property","updateSetting","_SettingFieldReduxConnector","Group","controlId","Label","showSettings","hide","show","toggle","_SettingsReduxConnector","Modal","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Vibrate","UploadButton","showUpload","parsable","preventDefault","UploadModal","downloading","files","_files","slice","push","file","completed","failed","progress","active","downloadFile","endpoint","FormData","append","headers","onUploadProgress","progressEvent","loaded","total","reset","accept","multiple","addFiles","readyToUpload","ButtonGroup","download","readyToRetry","isComplete","ProgressBar","animated","striped","now","DropSerializer","options","messageKey","nodeSave","has","init","id","width","eventsLoaded","nodeSelected","Row","Col","isLoading","spin","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","storedSettings","setItem","stringify","oldMessages","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","modules","reducerMap","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFileExcel","faFileUpload","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf80eb2d.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SHOW_UPLOAD = \"drop-serializer/SET_SHOW_UPLOAD\";\nexport const setShowUpload = (payload) => {\n    return {\n        type: SET_SHOW_UPLOAD,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import axios from \"axios\";\nimport uuidv1 from \"uuid/v1\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\nimport {selectEvent, selectNode} from \"./select\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops,\n            token: uuidv1()\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {event_uid} = submission;\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(reloadOutdatedEventData(event_uid, response.data.missing_drops)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n\nexport const reloadOutdatedEventData = (submissionEventUid, missingDrops) => {\n    return (dispatch, getState) => {\n        const {selectedEvent, selectedNode} = getState().dropSerializer;\n\n        // Event data isn't outdated\n        if (!missingDrops) {\n            return Promise.resolve();\n        }\n\n        // Outdated event isn't the current selected event. They will refresh if they select again so do not force\n        // a refresh\n        if (submissionEventUid !== selectedEvent) {\n            return Promise.resolve();\n        }\n\n        // Event data is outdated. Refresh the data\n        return Promise.resolve()\n                      .then(() => dispatch(pushMessage(\n                          \"info\",\n                          \"Event data is outdated. Refreshing now ...\"\n                      )))\n                      .then(() => dispatch(selectEvent('')))\n                      .then(() => dispatch(selectEvent(selectedEvent)))\n                      .then(() => dispatch(selectNode(selectedNode)));\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession,\n    loadSettings,\n    loadSubmissionQueue,\n    setEventData,\n    setEventList,\n    setShowSettings,\n    updateLoading\n} from \"../drop-serializer-actions\";\nimport {sendNext} from \"./submission\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        showUpload: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch, getState) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => {\n                          // Send next submission (if exists) without blocking loading.\n                          dispatch(sendNext());\n\n                          return Promise.resolve();\n                      })\n                      .then(() => {\n                          if (getState().dropSerializer.settings.submitter_name === \"\")\n                              return dispatch(setShowSettings(true));\n\n                          return Promise.resolve();\n                      })\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n                    .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n                    .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        sheetId = eventLoaded ? eventData.sheet_id : '',\n        sheetLink = 'https://docs.google.com/spreadsheets/d/' + sheetId;\n\n    return {eventLoaded, sheetLink};\n};\n\nclass SheetButton extends React.Component {\n    render() {\n        if (!this.props.eventLoaded) {\n            return null;\n        }\n\n        return (\n            <a href={this.props.sheetLink}\n               className=\"text-success\"\n               target=\"_blank\" rel=\"noopener noreferrer author\">\n                <FontAwesomeIcon icon=\"file-excel\"/>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SheetButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nconst mapStateToProps = (state) => {\n    const drops = state.dropSerializer.eventData.drops,\n        dropCounts = state.dropSerializer.submissionDrops.map(submissionDrop => {\n            if (submissionDrop.ignored)\n                return 0;\n\n            let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n            if (drop && drop.type === 'Bonus Rate-Up')\n                return 0;\n\n            return submissionDrop.count;\n        }),\n        dropCount = dropCounts.reduce((a, b) => a + b, 0);\n\n    return {dropCount};\n};\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false,\n            timeout: null\n        }\n    }\n\n    componentWillUnmount() {\n        if (!this.state.timeout)\n            return;\n\n        window.clearTimeout(this.state.timeout);\n        this.setState({timeout: null});\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <img className=\"chest-icon\" src=\"assets/chest.png\"/> {this.props.dropCount}\n                &nbsp;\n                -\n                &nbsp;\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({\n            disabled: true,\n            timeout: window.setTimeout(() => {\n                this.setState({disabled: false, timeout: null});\n            }, this.state.delay)\n        });\n    }\n}\n\nexport default connect(mapStateToProps)(SubmitButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(5).keys()].map(i =>\n                    <option key={i} value={i * 25}>{i * 25}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 25,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -25\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    let {submissionQueue} = state.dropSerializer,\n        pendingCount = submissionQueue === undefined ? 0 : submissionQueue.length;\n\n    return {pendingCount};\n};\n\nclass PendingSubmissions extends React.Component {\n    render() {\n        if (this.props.pendingCount === 0)\n            return null;\n\n        return (\n            <Alert variant='warning'>{this.props.pendingCount} pending submission(s).</Alert>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(PendingSubmissions);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\nimport PendingSubmissions from \"./PendingSubmissions\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                <PendingSubmissions />\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"primary\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {setShowUpload} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList, selectedNode, showUpload} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        parsable = eventLoaded ? eventData.parsable : false;\n\n    return {eventLoaded, parsable, selectedNode, showUpload};\n};\n\nclass UploadButton extends React.Component {\n    toggle() {\n        this.props.dispatch(setShowUpload(!this.props.showUpload));\n    }\n\n    render() {\n        if (!this.props.eventLoaded || !this.props.parsable || !this.props.selectedNode) {\n            return null;\n        }\n\n        return (\n            <a href=\"\"\n               onClick={event => {\n                   event.preventDefault();\n                   this.toggle();\n               }}>\n                <FontAwesomeIcon icon=\"file-upload\"/>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(UploadButton);\n","import axios from \"axios\";\nimport React from \"react\";\nimport {Button, ButtonGroup, ProgressBar} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport {connect} from \"react-redux\";\nimport {setShowUpload} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {domain, selectedEvent, selectedNode, settings, showUpload} = state.dropSerializer;\n\n    return {\n        domain,\n        selectedEvent,\n        selectedNode,\n        show: showUpload,\n        submitter: settings.submitter_name\n    };\n};\n\nclass UploadModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            downloading: false,\n            type: \"simple\",\n            files: [],\n        };\n    }\n\n    addFiles(files) {\n        const _files = this.state.files.slice();\n\n        for (let i = 0; i < files.length; i++) {\n            _files.push({\n                file: files[i],\n                completed: false,\n                failed: false,\n                progress: 0,\n            });\n        }\n\n        this.setState({\n            files: _files\n        });\n    }\n\n    async download() {\n        await this.setState({downloading: true});\n\n        let active = 0;\n\n        for (let i = 0; i < this.state.files.length; i++) {\n            const file = this.state.files[i];\n\n            if (file.completed)\n                continue;\n\n            active++;\n            this.downloadFile(i, file).then(() => {\n                active--;\n            });\n\n            while (active >= 5) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n        }\n\n        while (active > 0) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        await this.setState({downloading: false});\n    }\n\n    async downloadFile(i, file) {\n        const endpoint = this.props.domain + '/submit/screenshot';\n\n        let files = [...this.state.files];\n\n        files[i].failed = false;\n        files[i].progress = 0;\n        await this.setState({files});\n\n        try {\n            const data = new FormData();\n            data.append('event_uid', this.props.selectedEvent);\n            data.append('event_node_uid', this.props.selectedNode);\n            data.append('submitter', this.props.submitter);\n            data.append('type', this.state.type);\n            data.append('files[]', file.file);\n\n            await axios.post(endpoint, data, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                onUploadProgress: (progressEvent) => {\n                    files = [...this.state.files];\n\n                    files[i].progress = progressEvent.loaded / progressEvent.total * 100;\n                    this.setState({files});\n                }\n            });\n\n            files = [...this.state.files];\n            files[i].completed = true;\n            await this.setState({files});\n        } catch (e) {\n            files = [...this.state.files];\n            files[i].failed = true;\n            await this.setState({files});\n        }\n\n        return true;\n    }\n\n    readyToUpload() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => file.failed).length === 0\n            && this.state.files.filter(file => !file.completed && !file.failed).length > 0;\n    }\n\n    readyToRetry() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => file.failed).length > 0;\n    }\n\n    isComplete() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => !file.completed).length === 0;\n    }\n\n    reset() {\n        this.setState({files: []});\n    }\n\n    hide() {\n        if (this.state.downloading)\n            return;\n\n        this.props.dispatch(setShowUpload(false));\n        this.reset();\n    }\n\n    render() {\n        return (\n            <Modal show={this.props.show} onHide={() => this.hide()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {!this.state.downloading ? (\n                        <Form>\n                            {!this.state.files.length ? (\n                                <div>\n                                    <Form.Group>\n                                        <Form.Label>Type</Form.Label>\n                                        <Form.Control as=\"select\"\n                                                      value={this.state.type}\n                                                      onChange={event => {\n                                                          this.setState({type: event.target.value});\n                                                      }}>\n                                            <option value={\"simple\"}>Simple</option>\n                                            <option value={\"full\"}>Full</option>\n                                        </Form.Control>\n                                    </Form.Group>\n                                    <Form.Group>\n                                        <div className=\"custom-file\">\n                                            <input type=\"file\"\n                                                   className=\"custom-file-input\"\n                                                   accept=\"image/*\"\n                                                   multiple=\"multiple\"\n                                                   onChange={(event) => {\n                                                       this.addFiles(event.target.files);\n                                                   }}/>\n                                            <label className=\"custom-file-label\">Select Files</label>\n                                        </div>\n                                    </Form.Group>\n                                </div>\n                            ) : null}\n                            {this.readyToUpload() ? (\n                                <Form.Group>\n                                    <ButtonGroup className=\"btn-block\">\n                                        <Button variant=\"danger\" onClick={() => this.reset()}>Reset</Button>\n                                        <Button onClick={() => this.download()}>Upload All</Button>\n                                    </ButtonGroup>\n                                </Form.Group>\n                            ) : null}\n\n                            {this.readyToRetry() ? (\n                                <Form.Group>\n                                    <ButtonGroup className=\"btn-block\">\n                                        <Button variant=\"danger\" onClick={() => this.reset()}>Reset</Button>\n                                        <Button onClick={() => this.download()}>Retry Failed</Button>\n                                    </ButtonGroup>\n                                </Form.Group>\n                            ) : null}\n\n                            {this.isComplete() ? (\n                                <div>\n                                    <p>All Complete</p>\n                                    <Button block variant=\"success\" onClick={() => this.reset()}>New\n                                        Uploads</Button>\n                                </div>\n                            ) : null}\n                        </Form>\n                    ) : null}\n\n                    {this.state.files.map((file, i) => {\n                        return file.completed ? null : (\n                            <div key={i}>\n                                <h5>{file.file.name}</h5>\n                                {this.state.downloading && !file.failed ? (\n                                    <ProgressBar animated striped now={file.progress}/>\n                                ) : null}\n                                {file.failed ? (\n                                    <p className='text-danger'>Failed</p>\n                                ) : null}\n                                <br/>\n                            </div>\n                        );\n                    })}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(UploadModal);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {connect} from 'react-redux';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport SheetButton from \"./Button/SheetButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport Messages from \"./Message/Messages\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport UploadButton from \"./Upload/UploadButton\";\nimport UploadModal from \"./Upload/UploadModal\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        return <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <h1>\n                    Drop Serializer\n                    <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                </h1>\n\n                <ToggleSettingButton/>\n\n                <div className=\"links\">\n                    <UploadButton/>\n                    <SheetButton/>\n                    <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'github']}/>\n                    </a>\n                    <a href=\"https://discord.gg/TKJmuCR\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'discord']}/>\n                    </a>\n                </div>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            <UploadModal/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION,\n    RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SHOW_UPLOAD,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\"\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SHOW_UPLOAD:\n            return {...state, showUpload: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFileExcel,\n    faFileUpload,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFileExcel);\nlibrary.add(faFileUpload);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}