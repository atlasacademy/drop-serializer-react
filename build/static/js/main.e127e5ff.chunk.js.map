{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/load.js","components/Message/Message.js","components/Message/Messages.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","redux/thunks/query.js","redux/thunks/select.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Button/ToggleFilterButton.js","redux/thunks/submission.js","components/Button/SubmitButton.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["INIT_STATE","LOAD_SESSION","loadSession","type","LOAD_SETTINGS","LOAD_SUBMISSION_QUEUE","QUEUE_SUBMISSION","PUSH_MESSAGE","pushMessage","message","payload","RESET_SUBMISSION","SELECT_EVENT","setEvent","SELECT_NODE","SET_EVENT_LIST","SET_EVENT_DATA","setEventData","SET_SHOW_FILTERS","SET_SHOW_SETTINGS","setShowSettings","SET_SUBMISSION_PENDING","setSubmissionPending","SHIFT_MESSAGES","SHIFT_SUBMISSIONS","shiftSubmissions","UPDATE_DROP","updateDrop","uid","quantity","count","ignored","UPDATE_LOADING","updateLoading","UPDATE_SETTING","updateSetting","property","value","init","options","state","Object","objectSpread","domain","enableEventSelector","enableQueryParameters","messageKey","messages","nodeSave","selectedEvent","selectedNode","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","settings","showFilters","showSettings","submissionPending","submissionQueue","params","URLSearchParams","window","location","search","has","get","dispatch","Promise","resolve","then","fetchEvents","fetchEvent","getState","_getState$dropSeriali","dropSerializer","axios","response","data","_getState$dropSeriali2","Message","_this","this","setTimeout","props","react_default","a","createElement","Alert_default","variant","React","Component","connect","Messages","className","map","components_Message_Message","key","undefined","mapStateToProps","ownProps","mapDispatchToProps","update","_SettingFieldReduxConnector","reduxConnect","_ref","Form_default","Group","controlId","Label","Control","as","onChange","e","target","disabled","navigator","vibrate","hide","show","toggle","_SettingsReduxConnector","Modal_default","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Click","Vibrate","Button_default","onClick","react_fontawesome","icon","nodeDrop","_state$dropSerializer","eventData","submissionDrops","drop","drops","filter","shift","quantityDisplay","submissionDrop","_DropReduxConnector","DropCount","size","parseInt","isNaN","Howl","src","_DropIncrementor","incrementorSettings","classCallCheck","defaultSettings","delay","iteratorSkip","max","min","step","windowLeash","possibleConstructorReturn","getPrototypeOf","call","interval","iterator","running","windowPosition","windowListener","stopInterval","startInterval","stepCount","Math","abs","scrollY","parent","animate","click","play","_this2","setInterval","tick","onWindowScroll","addEventListener","setState","clearInterval","removeEventListener","dropState","_DropIncrementorReduxConnector","DropDecrement","block","tabIndex","onMouseDown","onMouseMove","onMouseOut","onMouseUp","DropIcon","draggable","image","alt","name","DropToggle","DropIndicator","isSelected","difference","indicator","toString","Drop","animating","columns","Incrementor_DropIcon","Drop_DropIndicator","Count_DropCount","Incrementor_DropDecrement","Toggle_DropToggle","DropBonusCount","toConsumableArray","Array","keys","i","DropBonusIcon","DropBonusDecrement","DropBonus","Incrementor_DropBonusIcon","Count_DropBonusCount","Incrementor_DropBonusDecrement","DropContainer","makeNodeDropKey","event_uid","event_node_uid","nodeDrops","Drop_DropBonus","components_Drop_Drop","node_drops","setQuery","eventUid","nodeUid","set","delete","newUrl","protocol","host","pathname","history","replaceState","path","selectNode","EventSelector","updateEvent","concat","eventList","event","NodeSelector","updateNode","nodeList","node","nodes","ToggleFilterButton","queue","submitterName","submitter_name","submission","submitter","sendNext","length","submit","post","receipt","catch","error","status","SubmitButton","_this3","DropSerializer","id","width","href","ToggleSettingsButton","rel","index_es","eventsLoaded","Selector_EventSelector","eventLoaded","Selector_NodeSelector","nodeSelected","Drop_DropContainer","Row_default","Col_default","Button_ToggleFilterButton","Button_SubmitButton","SettingsModal","isLoading","spin","Message_Messages","Boolean","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","storedSettings","push","setItem","stringify","oldMessages","slice","_action$payload","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","es","redux_dynamic_modules_react_lib","modules","reducerMap","components_DropSerializer","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e127e5ff.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession, loadSettings, loadSubmissionQueue,\n    setEventData, setEventList,\n    updateLoading\n} from \"../drop-serializer-actions\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n            .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n            .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"primary\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(11).keys()].map(i =>\n                    <option key={i} value={i * 10}>{i * 10}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 10,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (eventData && uid === eventData.uid)\n            return;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import axios from \"axios\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false\n        }\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({disabled: true});\n        window.setTimeout(() => {\n            this.setState({disabled: false});\n        }, this.state.delay);\n    }\n}\n\nexport default connect()(SubmitButton);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {connect} from 'react-redux';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport Messages from \"./Message/Messages\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        return <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <h1>\n                    Drop Serializer\n                    <small>by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                </h1>\n\n                <ToggleSettingButton/>\n\n                <div className=\"links\">\n                    <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'github']}/>\n                    </a>\n                    <a href=\"https://discord.gg/TKJmuCR\"\n                       className=\"text-secondary\"\n                       target=\"_blank\" rel=\"noopener noreferrer author\">\n                        <FontAwesomeIcon icon={['fab', 'discord']}/>\n                    </a>\n                </div>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION, RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\"\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}