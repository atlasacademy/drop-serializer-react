{"version":3,"sources":["redux/drop-serializer-actions.js","redux/thunks/query.js","redux/thunks/select.js","redux/thunks/submission.js","redux/thunks/load.js","components/Button/SheetButton.js","components/Button/SubmitButton.js","components/Button/ToggleFilterButton.js","components/Drop/_DropReduxConnector.js","components/Drop/Count/DropCount.js","components/Drop/Incrementor/_DropIncrementor.js","components/Drop/Incrementor/_DropIncrementorReduxConnector.js","components/Drop/Incrementor/DropDecrement.js","components/Drop/Incrementor/DropIcon.js","components/Drop/Toggle/DropToggle.js","components/Drop/DropIndicator.js","components/Drop/Drop.js","components/Drop/Count/DropBonusCount.js","components/Drop/Incrementor/DropBonusIcon.js","components/Drop/Incrementor/DropBonusDecrement.js","components/Drop/DropBonus.js","components/Drop/DropContainer.js","components/Message/Message.js","components/Message/PendingSubmissions.js","components/Message/Messages.js","components/Selector/EventSelector.js","components/Selector/NodeSelector.js","components/Setting/Field/_SettingFieldReduxConnector.js","components/Setting/Field/Click.js","components/Setting/Field/Columns.js","components/Setting/Field/SubmitterName.js","components/Setting/Field/Vibrate.js","components/Setting/Field/Width.js","components/Setting/Field/Theme.js","components/Setting/_SettingsReduxConnector.js","components/Setting/SettingsModal.js","components/Setting/ToggleSettingsButton.js","components/Upload/UploadButton.js","components/Upload/UploadModal.js","components/DropSerializer.js","redux/drop-serializer-reducer.js","App.js","redux/drop-serializer-module.js","serviceWorker.js","index.js"],"names":["INIT_STATE","LOAD_SESSION","loadSession","type","LOAD_SETTINGS","LOAD_SUBMISSION_QUEUE","QUEUE_SUBMISSION","PUSH_MESSAGE","pushMessage","message","payload","RESET_SUBMISSION","SELECT_EVENT","setEvent","SELECT_NODE","SET_EVENT_LIST","SET_EVENT_DATA","setEventData","SET_SHOW_FILTERS","SET_SHOW_SETTINGS","setShowSettings","SET_SHOW_UPLOAD","setShowUpload","SET_SUBMISSION_PENDING","setSubmissionPending","SHIFT_MESSAGES","SHIFT_SUBMISSIONS","shiftSubmissions","UPDATE_DROP","UPDATE_LOADING","updateLoading","UPDATE_SETTING","setQuery","eventUid","nodeUid","dispatch","getState","enableQueryParameters","dropSerializer","location","window","params","URLSearchParams","search","set","delete","newUrl","protocol","host","pathname","toString","history","replaceState","path","selectEvent","uid","eventData","Promise","resolve","then","fetchEvent","selectNode","selectedEvent","queue","selectedNode","settings","submissionDrops","nodeDrops","node_drops","filter","nodeDrop","event_node_uid","submitterName","submitter_name","drops","map","drop","submissionDrop","quantity","shift","count","ignored","submission","event_uid","submitter","token","uuidv1","sendNext","submissionQueue","submissionPending","length","submit","domain","axios","post","response","data","receipt","reloadOutdatedEventData","missing_drops","catch","error","status","setTimeout","submissionEventUid","missingDrops","init","options","state","enableEventSelector","messageKey","messages","nodeSave","selectedDropUid","selectedDropQuantity","selectedDropInitialCount","showFilters","showSettings","showUpload","has","get","fetchEvents","SheetButton","React","Component","render","this","props","eventLoaded","href","sheetLink","className","target","rel","Button","variant","icon","connect","eventList","Boolean","sheet_id","SubmitButton","constructor","super","delay","disabled","timeout","componentWillUnmount","clearTimeout","setState","block","onClick","e","src","alt","dropCount","reduce","a","b","ToggleFilterButton","mapStateToProps","ownProps","quantityDisplay","undefined","mapDispatchToProps","update","updateDrop","reduxConnect","DropCount","Form","Control","value","onChange","size","parseInt","isNaN","_DropReduxConnector","Click","Howl","_DropIncrementor","incrementorSettings","defaultSettings","iteratorSkip","max","min","step","windowLeash","interval","iterator","running","windowPosition","windowListener","stopInterval","onMouseDown","startInterval","onMouseMove","onMouseOut","onMouseUp","stepCount","onWindowScroll","Math","abs","scrollY","parent","animate","click","play","vibrate","navigator","setInterval","tick","addEventListener","clearInterval","removeEventListener","_DropIncrementorReduxConnector","tabIndex","draggable","image","name","DropToggle","DropIndicator","isSelected","difference","indicator","Drop","animating","columns","toLocaleString","DropBonusCount","as","Array","keys","i","DropBonus","DropContainer","makeNodeDropKey","Message","componentDidMount","Alert","PendingSubmissions","pendingCount","Messages","key","EventSelector","updateEvent","concat","event","NodeSelector","updateNode","nodeList","node","nodes","property","updateSetting","_SettingFieldReduxConnector","Group","controlId","Label","BOOTSWATCH_THEMES","theme","hide","show","toggle","_SettingsReduxConnector","Modal","onHide","Header","closeButton","Title","Body","SubmitterName","Width","Columns","Theme","Vibrate","UploadButton","parsable","preventDefault","UploadModal","downloading","files","addFiles","_files","slice","push","file","completed","failed","progress","active","downloadFile","endpoint","FormData","append","headers","onUploadProgress","progressEvent","loaded","total","readyToUpload","readyToRetry","isComplete","reset","isEvent","test","selectedEventName","selectedNodeName","Text","accept","multiple","ButtonGroup","download","ProgressBar","animated","striped","now","find","n","DropSerializer","replace","id","width","Row","Col","md","lg","eventsLoaded","nodeSelected","isLoading","spin","dropSerializerReducer","action","storageKey","json","localStorage","getItem","JSON","parse","setItem","stringify","initialDrop","newState","newSettings","App","store","createStore","applyMiddleware","thunkMiddleware","modules","reducerMap","hostname","match","library","add","faBan","faCheck","faCog","faCopy","faFileExcel","faFileUpload","faFilter","faMinus","faSpinner","faTrashAlt","faDiscord","faGithub","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57add725.chunk.js","sourcesContent":["export const INIT_STATE = \"drop-serializer/INIT_STATE\";\nexport const initState = (payload) => {\n    return {\n        type: INIT_STATE,\n        payload\n    };\n};\n\nexport const LOAD_SESSION = \"drop-serializer/LOAD_SESSION\";\nexport const loadSession = () => {\n    return {\n        type: LOAD_SESSION\n    };\n};\n\nexport const LOAD_SETTINGS = \"drop-serializer/LOAD_SETTINGS\";\nexport const loadSettings = () => {\n    return {\n        type: LOAD_SETTINGS\n    };\n};\n\nexport const LOAD_SUBMISSION_QUEUE = \"drop-serializer/LOAD_SUBMISSION_QUEUE\";\nexport const loadSubmissionQueue = () => {\n    return {\n        type: LOAD_SUBMISSION_QUEUE\n    };\n};\n\nexport const QUEUE_SUBMISSION = \"drop-serializer/QUEUE_SUBMISSION\";\nexport const queueSubmission = (payload) => {\n    return {\n        type: QUEUE_SUBMISSION,\n        payload\n    };\n};\n\nexport const PUSH_MESSAGE = \"drop-serializer/PUSH_MESSAGE\";\nexport const pushMessage = (type, message) => {\n    return {\n        type: PUSH_MESSAGE,\n        payload: {type, message}\n    };\n};\n\nexport const RESET_SUBMISSION = \"drop-serializer/RESET_SUBMISSION\";\nexport const resetSubmission = () => {\n    return {\n        type: RESET_SUBMISSION\n    };\n};\n\nexport const SELECT_EVENT = \"drop-serializer/SELECT_EVENT\";\nexport const setEvent = (payload) => {\n    return {\n        type: SELECT_EVENT,\n        payload\n    };\n};\n\nexport const SELECT_NODE = \"drop-serializer/SELECT_NODE\";\nexport const setNode = (payload) => {\n    return {\n        type: SELECT_NODE,\n        payload\n    };\n};\n\nexport const SET_EVENT_LIST = \"drop-serializer/SET_EVENT_LIST\";\nexport const setEventList = (payload) => {\n    return {\n        type: SET_EVENT_LIST,\n        payload\n    };\n};\n\nexport const SET_EVENT_DATA = \"drop-serializer/SET_EVENT_DATA\";\nexport const setEventData = (payload) => {\n    return {\n        type: SET_EVENT_DATA,\n        payload\n    };\n};\n\nexport const SET_SHOW_FILTERS = \"drop-serializer/SET_SHOW_FILTERS\";\nexport const setShowFilters = (payload) => {\n    return {\n        type: SET_SHOW_FILTERS,\n        payload\n    };\n};\n\nexport const SET_SHOW_SETTINGS = \"drop-serializer/SET_SHOW_SETTINGS\";\nexport const setShowSettings = (payload) => {\n    return {\n        type: SET_SHOW_SETTINGS,\n        payload\n    };\n};\n\nexport const SET_SHOW_UPLOAD = \"drop-serializer/SET_SHOW_UPLOAD\";\nexport const setShowUpload = (payload) => {\n    return {\n        type: SET_SHOW_UPLOAD,\n        payload\n    };\n};\n\nexport const SET_SUBMISSION_PENDING = \"drop-serializer/SET_SUBMISSION_PENDING\";\nexport const setSubmissionPending = (payload) => {\n    return {\n        type: SET_SUBMISSION_PENDING,\n        payload\n    };\n};\n\nexport const SHIFT_MESSAGES = \"drop-serializer/SHIFT_MESSAGES\";\nexport const shiftMessages = () => {\n    return {\n        type: SHIFT_MESSAGES\n    };\n};\n\nexport const SHIFT_SUBMISSIONS = \"drop-serializer/SHIFT_SUBMISSIONS\";\nexport const shiftSubmissions = () => {\n    return {\n        type: SHIFT_SUBMISSIONS\n    };\n};\n\nexport const UPDATE_DROP = \"drop-serializer/UPDATE_DROP\";\nexport const updateDrop = (uid, quantity, count, ignored) => {\n    return {\n        type: UPDATE_DROP,\n        payload: {uid, quantity, count, ignored}\n    };\n};\n\nexport const UPDATE_LOADING = \"drop-serializer/UPDATE_LOADING\";\nexport const updateLoading = (payload) => {\n    return {\n        type: UPDATE_LOADING,\n        payload\n    };\n};\n\nexport const UPDATE_SETTING = \"drop-serializer/UPDATE_SETTING\";\nexport const updateSetting = (property, value) => {\n    return {\n        type: UPDATE_SETTING,\n        payload: {property, value}\n    };\n};\n","export const setQuery = (eventUid, nodeUid) => {\n    return (dispatch, getState) => {\n        const {enableQueryParameters} = getState().dropSerializer;\n\n        if (!enableQueryParameters)\n            return;\n\n        let location = window.location,\n            params = new URLSearchParams(location.search);\n\n        if (eventUid) params.set(\"event\", eventUid);\n        else params.delete(\"event\");\n\n        if (nodeUid) params.set(\"node\", nodeUid);\n        else params.delete(\"node\");\n\n        let hostname = location.protocol + \"//\" + location.host + location.pathname,\n            newUrl = hostname + \"?\" + params.toString();\n\n        window.history.replaceState({path: newUrl}, '', newUrl);\n    };\n};","import {loadSession, setEvent, setEventData, setNode, updateLoading} from \"../drop-serializer-actions\";\nimport {setQuery} from \"./query\";\nimport {fetchEvent} from \"./load\";\n\nexport const selectEvent = (uid) => {\n    return (dispatch, getState) => {\n        const {eventData} = getState().dropSerializer;\n\n        if (!uid)\n            return Promise.resolve()\n                          .then(() => dispatch(setEvent(uid)))\n                          .then(() => dispatch(setQuery(false, false)))\n                          .then(() => dispatch(setEventData(null)));\n\n        return Promise.resolve()\n                      .then(() => dispatch(setEvent(uid)))\n                      .then(() => dispatch(setQuery(uid, false)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(setEventData(null)))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const selectNode = (uid) => {\n    return (dispatch, getState) => {\n        const {selectedEvent} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setNode(uid)))\n                      .then(() => dispatch(setQuery(selectedEvent, uid)))\n                      .then(() => dispatch(loadSession()));\n    };\n};\n","import axios from \"axios\";\nimport uuidv1 from \"uuid/v1\";\nimport {\n    pushMessage,\n    queueSubmission,\n    resetSubmission,\n    setSubmissionPending,\n    shiftSubmissions\n} from \"../drop-serializer-actions\";\nimport {selectEvent, selectNode} from \"./select\";\n\nexport const queue = () => {\n    return (dispatch, getState) => {\n        const {eventData, selectedEvent, selectedNode, settings, submissionDrops} = getState().dropSerializer,\n            nodeDrops = eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n            submitterName = settings ? settings.submitter_name : \"\";\n\n        // Loop through node drops and fill in any drops missing from submission drops with standard 0 count\n        let drops = nodeDrops.map(nodeDrop => {\n            let drop = submissionDrops.filter(submissionDrop =>\n                submissionDrop.uid === nodeDrop.uid && submissionDrop.quantity === nodeDrop.quantity\n            ).shift();\n\n            if (!drop)\n                drop = {uid: nodeDrop.uid, quantity: nodeDrop.quantity, count: 0, ignored: false};\n\n            return drop;\n        });\n\n        let submission = {\n            event_uid: selectedEvent,\n            event_node_uid: selectedNode,\n            submitter: submitterName,\n            drops: drops,\n            token: uuidv1()\n        };\n\n        return Promise.resolve()\n                      .then(() => dispatch(queueSubmission(submission)))\n                      .then(() => dispatch(resetSubmission()))\n                      .then(() => dispatch(sendNext()));\n    };\n};\n\nexport const sendNext = () => {\n    return (dispatch, getState) => {\n        const {submissionQueue, submissionPending} = getState().dropSerializer;\n\n        if (submissionPending)\n            return;\n\n        if (!submissionQueue.length)\n            return;\n\n        let submission = submissionQueue[0];\n\n        return dispatch(submit(submission));\n    };\n};\n\nexport const submit = (submission) => {\n    return (dispatch, getState) => {\n        const {event_uid} = submission;\n        const {domain} = getState().dropSerializer;\n\n        return Promise.resolve()\n                      .then(() => dispatch(setSubmissionPending(true)))\n                      .then(() => axios.post(domain + '/submit/run', submission))\n                      .then((response) =>\n                          Promise.resolve()\n                                 .then(() => dispatch(pushMessage(\n                                     \"success\",\n                                     \"Created submission: \" + response.data.receipt\n                                 )))\n                                 .then(() => dispatch(shiftSubmissions()))\n                                 .then(() => dispatch(setSubmissionPending(false)))\n                                 .then(() => dispatch(reloadOutdatedEventData(event_uid, response.data.missing_drops)))\n                                 .then(() => dispatch(sendNext()))\n                      )\n                      .catch(error => {\n                          if (error.response.status === 422) {\n                              return Promise.resolve()\n                                            .then(() => dispatch(pushMessage(\n                                                \"danger\",\n                                                \"Submission rejected\"\n                                            )))\n                                            .then(() => dispatch(shiftSubmissions()))\n                                            .then(() => dispatch(setSubmissionPending(false)))\n                                            .then(() => dispatch(sendNext()));\n                          }\n\n                          return Promise.resolve()\n                                        .then(() => dispatch(pushMessage(\n                                            \"warning\",\n                                            \"Issue during submission. Retrying ...\"\n                                        )))\n                                        .then(() => {\n                                            return new Promise(resolve => {\n                                                window.setTimeout(resolve, 5000);\n                                            });\n                                        })\n                                        .then(() => dispatch(setSubmissionPending(false)))\n                                        .then(() => dispatch(sendNext()));\n                      });\n    };\n};\n\nexport const reloadOutdatedEventData = (submissionEventUid, missingDrops) => {\n    return (dispatch, getState) => {\n        const {selectedEvent, selectedNode} = getState().dropSerializer;\n\n        // Event data isn't outdated\n        if (!missingDrops) {\n            return Promise.resolve();\n        }\n\n        // Outdated event isn't the current selected event. They will refresh if they select again so do not force\n        // a refresh\n        if (submissionEventUid !== selectedEvent) {\n            return Promise.resolve();\n        }\n\n        // Event data is outdated. Refresh the data\n        return Promise.resolve()\n                      .then(() => dispatch(pushMessage(\n                          \"info\",\n                          \"Event data is outdated. Refreshing now ...\"\n                      )))\n                      .then(() => dispatch(selectEvent('')))\n                      .then(() => dispatch(selectEvent(selectedEvent)))\n                      .then(() => dispatch(selectNode(selectedNode)));\n    };\n};\n","import axios from \"axios\";\nimport {\n    initState,\n    loadSession,\n    loadSettings,\n    loadSubmissionQueue,\n    setEventData,\n    setEventList,\n    setShowSettings,\n    updateLoading\n} from \"../drop-serializer-actions\";\nimport {sendNext} from \"./submission\";\n\nexport const init = (options) => {\n    let state = {\n        domain: \"https://submissions.atlasacademy.io\",\n        enableEventSelector: true,\n        enableQueryParameters: true,\n        messageKey: 0,\n        messages: [],\n        nodeSave: [],\n        selectedEvent: \"\",\n        selectedNode: \"\",\n        selectedDropUid: null,\n        selectedDropQuantity: null,\n        selectedDropInitialCount: null,\n        settings: {},\n        showFilters: false,\n        showSettings: false,\n        showUpload: false,\n        submissionPending: false,\n        submissionQueue: [],\n        ...options\n    };\n\n    if (state.enableQueryParameters) {\n        let params = new URLSearchParams(window.location.search);\n\n        if (!state.selectedEvent)\n            state.selectedEvent = params.has(\"event\") ? params.get(\"event\") : \"\";\n\n        if (state.selectedEvent && !state.selectedNode)\n            state.selectedNode = params.has(\"node\") ? params.get(\"node\") : \"\";\n    }\n\n    return (dispatch, getState) => {\n        return Promise.resolve()\n                      .then(() => dispatch(initState(state)))\n                      .then(() => dispatch(updateLoading(true)))\n                      .then(() => dispatch(loadSettings()))\n                      .then(() => dispatch(fetchEvents()))\n                      .then(() => dispatch(fetchEvent()))\n                      .then(() => dispatch(loadSession()))\n                      .then(() => dispatch(loadSubmissionQueue()))\n                      .then(() => {\n                          // Send next submission (if exists) without blocking loading.\n                          dispatch(sendNext());\n\n                          return Promise.resolve();\n                      })\n                      .then(() => {\n                          if (getState().dropSerializer.settings.submitter_name === \"\")\n                              return dispatch(setShowSettings(true));\n\n                          return Promise.resolve();\n                      })\n                      .then(() => dispatch(updateLoading(false)));\n    };\n};\n\nexport const fetchEvents = () => {\n    return (dispatch, getState) => {\n        const {domain, enableEventSelector} = getState().dropSerializer;\n\n        if (!enableEventSelector)\n            return;\n\n        return axios.get(domain + \"/event\")\n                    .then(response => dispatch(setEventList(response.data)));\n    };\n};\n\nexport const fetchEvent = () => {\n    return (dispatch, getState) => {\n        const {domain, selectedEvent} = getState().dropSerializer;\n\n        if (!selectedEvent)\n            return;\n\n        return axios.get(domain + \"/event/\" + selectedEvent)\n                    .then(response => dispatch(setEventData(response.data)));\n    };\n};\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {Button} from \"react-bootstrap\";\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        sheetId = eventLoaded ? eventData.sheet_id : '',\n        sheetLink = 'https://docs.google.com/spreadsheets/d/' + sheetId;\n\n    return {eventLoaded, sheetLink};\n};\n\nclass SheetButton extends React.Component {\n    render() {\n        if (!this.props.eventLoaded) {\n            return null;\n        }\n\n        return (\n            <a href={this.props.sheetLink}\n               className=\"text-success\"\n               target=\"_blank\" rel=\"noopener noreferrer author\">\n                <Button variant=\"outline-success\">\n                    <FontAwesomeIcon icon=\"file-excel\"/>\n                </Button>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SheetButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {queue} from \"../../redux/thunks/submission\";\n\nconst mapStateToProps = (state) => {\n    const drops = state.dropSerializer.eventData.drops,\n        dropCounts = state.dropSerializer.submissionDrops.map(submissionDrop => {\n            if (submissionDrop.ignored)\n                return 0;\n\n            let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n            if (drop && drop.type === 'Bonus Rate-Up')\n                return 0;\n\n            return submissionDrop.count;\n        }),\n        dropCount = dropCounts.reduce((a, b) => a + b, 0);\n\n    return {dropCount};\n};\n\nclass SubmitButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            delay: 1000,\n            disabled: false,\n            timeout: null\n        }\n    }\n\n    componentWillUnmount() {\n        if (!this.state.timeout)\n            return;\n\n        window.clearTimeout(this.state.timeout);\n        this.setState({timeout: null});\n    }\n\n    render() {\n        return (\n            <Button variant=\"success\" block disabled={this.state.disabled} onClick={(e) => this.submit()}>\n                <img className=\"chest-icon\" src=\"assets/chest.png\" alt=\"\"/> {this.props.dropCount}\n                &nbsp;\n                -\n                &nbsp;\n                <FontAwesomeIcon icon=\"copy\"/> Submit Run\n            </Button>\n        );\n    }\n\n    submit() {\n        this.props.dispatch(queue());\n        this.setState({\n            disabled: true,\n            timeout: window.setTimeout(() => {\n                this.setState({disabled: false, timeout: null});\n            }, this.state.delay)\n        });\n    }\n}\n\nexport default connect(mapStateToProps)(SubmitButton);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport {connect} from 'react-redux';\nimport {setShowFilters} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {showFilters} = state.dropSerializer;\n\n    return {showFilters};\n};\n\nclass ToggleFilterButton extends React.Component {\n\n    render() {\n        return (\n            <Button variant=\"primary\" block onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon icon=\"filter\"/> Toggle Filter\n            </Button>\n        );\n    }\n\n    onClick(e) {\n        this.props.dispatch(setShowFilters(!this.props.showFilters));\n    }\n\n}\n\nexport default connect(mapStateToProps)(ToggleFilterButton);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateDrop} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {nodeDrop} = ownProps,\n        {\n            eventData,\n            selectedDropUid,\n            selectedDropQuantity,\n            selectedDropInitialCount,\n            settings,\n            showFilters,\n            submissionDrops\n        } = state.dropSerializer,\n        drop = eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift(),\n        quantityDisplay = nodeDrop.quantity > 1 ? nodeDrop.quantity : drop.quantity,\n        submissionDrop = submissionDrops.filter(submissionDrop => {\n                                            return submissionDrop.uid === nodeDrop.uid\n                                                && submissionDrop.quantity === nodeDrop.quantity;\n                                        })\n                                        .shift();\n\n    if (submissionDrop === undefined)\n        submissionDrop = {\n            uid: nodeDrop.uid,\n            quantity: nodeDrop.quantity,\n            count: 0,\n            ignored: false\n        };\n\n    return {\n        drop,\n        nodeDrop,\n        quantityDisplay,\n        selectedDropUid,\n        selectedDropQuantity,\n        selectedDropInitialCount,\n        submissionDrop,\n        settings,\n        showFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (count, ignored) => dispatch(updateDrop(\n            ownProps.nodeDrop.uid,\n            ownProps.nodeDrop.quantity,\n            count,\n            ignored\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control type=\"text\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.onChange(e)}\n                          size=\"sm\"/>\n        );\n    }\n\n    onChange(e) {\n        let value = parseInt(e.target.value);\n\n        if (isNaN(value))\n            value = 0;\n        else if (value < 0)\n            value = 0;\n\n        this.props.update(value, false);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropCount);\n","import React from \"react\";\nimport {Howl} from \"howler\";\n\nconst Click = new Howl({src: \"./sounds/click.mp3\"});\n\nclass _DropIncrementor extends React.Component {\n\n    constructor(props, incrementorSettings) {\n        super(props);\n\n        const defaultSettings = {\n            delay: 250,\n            iteratorSkip: 2,\n            max: undefined,\n            min: 0,\n            step: 1,\n            windowLeash: 10\n        };\n\n        this.incrementorSettings = {\n            ...defaultSettings,\n            ...incrementorSettings\n        };\n\n        this.state = {\n            interval: null,\n            iterator: 0,\n            running: false,\n            windowPosition: null,\n            windowListener: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    onMouseDown(e) {\n        if (this.state.running)\n            return;\n\n        this.startInterval();\n    }\n\n    onMouseMove(e) {\n        //\n    }\n\n    onMouseOut(e) {\n        if (!this.state.running)\n            return;\n\n        this.stopInterval();\n    }\n\n    onMouseUp(e) {\n        if (!this.state.running)\n            return;\n\n        if (this.state.iterator <= this.incrementorSettings.iteratorSkip)\n            this.stepCount();\n\n        this.stopInterval();\n    }\n\n    onWindowScroll(e) {\n        if (!this.state.running)\n            return;\n\n        let diff = Math.abs(window.scrollY - this.state.windowPosition);\n        if (diff > this.incrementorSettings.windowLeash)\n            this.stopInterval();\n    }\n\n    stepCount() {\n        let count = this.props.submissionDrop.count + this.incrementorSettings.step;\n        if (count < this.incrementorSettings.min)\n            count = this.incrementorSettings.min;\n        else if (this.incrementorSettings.max !== undefined && count > this.incrementorSettings.max)\n            count = this.incrementorSettings.max;\n\n        this.props.update(count, false);\n\n        this.props.parent.animate();\n\n        if (this.props.settings.click)\n            Click.play();\n\n        if (this.props.settings.vibrate && window.navigator.vibrate)\n            window.navigator.vibrate(100);\n    }\n\n    startInterval() {\n        let interval = setInterval(() => this.tick(), this.incrementorSettings.delay),\n            windowPosition = window.scrollY,\n            windowListener = (e) => this.onWindowScroll(e);\n\n        window.addEventListener(\"scroll\", windowListener);\n        this.setState({\n            iterator: 0,\n            running: true,\n            interval,\n            windowListener,\n            windowPosition\n        });\n    }\n\n    stopInterval() {\n        if (!this.state.running)\n            return;\n\n        clearInterval(this.state.interval);\n        window.removeEventListener(\"scroll\", this.state.windowListener);\n\n        this.setState({\n            running: false,\n            interval: null,\n            windowListener: null,\n            windowPosition: null\n        });\n    }\n\n    tick() {\n        if (this.state.iterator > this.incrementorSettings.iteratorSkip) {\n            this.stepCount();\n        }\n\n        this.setState({iterator: this.state.iterator + 1});\n    }\n}\n\nexport default _DropIncrementor;\n","import {connect as reduxConnect} from \"react-redux\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nfunction mapStateToProps(state, ownProps) {\n    const {parent} = ownProps,\n        dropState = _DropReduxConnector.mapStateToProps(state, ownProps);\n\n    return {\n        ...dropState,\n        parent\n    };\n}\n\nconst mapDispatchToProps = _DropReduxConnector.mapDispatchToProps;\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: -1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropDecrement);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            delay: 250,\n            iteratorSkip: 2,\n            step: 1,\n            windowLeash: 10\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropIcon);\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropToggle extends React.Component {\n\n    render() {\n        if (!this.props.showFilters)\n            return null;\n\n        return (\n            <div className=\"drop-toggle\" onClick={(e) => this.onClick(e)}>\n                <FontAwesomeIcon className=\"drop-toggle-icon\"\n                                 icon={this.props.submissionDrop.ignored ? \"ban\" : \"check\"}/>\n            </div>\n        );\n    }\n\n    onClick(e) {\n        this.props.update(0, !this.props.submissionDrop.ignored);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropToggle);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\n\nclass DropIndicator extends React.Component {\n\n    render() {\n        let isSelected = (\n                this.props.selectedDropUid === this.props.nodeDrop.uid\n                && this.props.selectedDropQuantity === this.props.nodeDrop.quantity\n            ),\n            difference = isSelected ? this.props.submissionDrop.count - this.props.selectedDropInitialCount : 0,\n            plusOrMinus = difference >= 0 ? \"+\" : \"-\",\n            indicatorNumber = isSelected ? Math.abs(difference).toString() : \"\",\n            indicator = plusOrMinus + indicatorNumber;\n\n        return (\n            <span className=\"drop-indicator\">{indicator}</span>\n        )\n    }\n\n}\n\nexport default _DropReduxConnector.connect(DropIndicator);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropCount from \"./Count/DropCount\";\nimport DropDecrement from \"./Incrementor/DropDecrement\";\nimport DropIcon from \"./Incrementor/DropIcon\";\nimport DropToggle from \"./Toggle/DropToggle\";\nimport DropIndicator from \"./DropIndicator\";\n\nclass Drop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        if (this.props.submissionDrop.ignored && !this.props.showFilters)\n            return null;\n\n        return (\n            <div className={\"drop \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <DropIndicator nodeDrop={this.props.nodeDrop}/>\n                            <span className=\"drop-quantity\">\n                                {this.props.quantityDisplay > 1 ? this.props.quantityDisplay.toLocaleString() : \"\"}\n                            </span>\n                        </div>\n                        <DropCount nodeDrop={this.props.nodeDrop}/>\n                        <DropDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                    <DropToggle nodeDrop={this.props.nodeDrop}/>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(Drop);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _DropReduxConnector from \"../_DropReduxConnector\";\n\nclass DropBonusCount extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"drop-input\"\n                          value={this.props.submissionDrop.count}\n                          onChange={(e) => this.props.update(parseInt(e.target.value), false)}\n                          size=\"sm\">\n                {[...Array(5).keys()].map(i =>\n                    <option key={i} value={i * 25}>{i * 25}%</option>\n                )}\n            </Form.Control>\n        );\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonusCount);\n","import React from \"react\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusIcon extends _DropIncrementor {\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: 25,\n        });\n    }\n\n    render() {\n        return (\n            <img className=\"drop-icon\" draggable=\"false\"\n                 src={this.props.drop.image}\n                 alt={this.props.drop.name}\n                 onMouseDown={(e) => this.onMouseDown(e)}\n                 onMouseMove={(e) => this.onMouseMove(e)}\n                 onMouseOut={(e) => this.onMouseOut(e)}\n                 onMouseUp={(e) => this.onMouseUp(e)}/>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusIcon);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _DropIncrementor from \"./_DropIncrementor\";\nimport _DropIncrementorReduxConnector from \"./_DropIncrementorReduxConnector\";\n\nclass DropBonusDecrement extends _DropIncrementor {\n\n    constructor(props) {\n        super(props, {\n            max: 100,\n            step: -25\n        });\n    }\n\n    render() {\n        return (\n            <Button variant=\"primary\" block size=\"sm\" tabIndex=\"-1\"\n                    onMouseDown={(e) => this.onMouseDown(e)}\n                    onMouseMove={(e) => this.onMouseMove(e)}\n                    onMouseOut={(e) => this.onMouseOut(e)}\n                    onMouseUp={(e) => this.onMouseUp(e)}>\n                <FontAwesomeIcon icon=\"minus\"/>\n            </Button>\n        );\n    }\n}\n\nexport default _DropIncrementorReduxConnector.connect(DropBonusDecrement);\n","import React from \"react\";\nimport _DropReduxConnector from \"./_DropReduxConnector\";\nimport DropBonusCount from \"./Count/DropBonusCount\";\nimport DropBonusIcon from \"./Incrementor/DropBonusIcon\";\nimport DropBonusDecrement from \"./Incrementor/DropBonusDecrement\";\n\nclass DropBonus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animating: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"drop drop-bonus \" + this.props.settings.columns + (this.state.animating ? \" animating\" : \"\")}>\n                <div className=\"drop-border\">\n                    <div className=\"drop-content\">\n                        <div className=\"drop-icon-box\">\n                            <DropBonusIcon nodeDrop={this.props.nodeDrop} parent={this}/>\n                            <span className=\"drop-indicator\">Bonus</span>\n                        </div>\n                        <DropBonusCount nodeDrop={this.props.nodeDrop}/>\n                        <DropBonusDecrement nodeDrop={this.props.nodeDrop} parent={this}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    animate() {\n        this.setState({animating: true});\n\n        setTimeout(() => this.setState({animating: false}), 1);\n    }\n}\n\nexport default _DropReduxConnector.connect(DropBonus);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Drop from './Drop';\nimport DropBonus from \"./DropBonus\";\n\nconst mapStateToProps = (state) => {\n    const {selectedNode} = state.dropSerializer,\n        nodeDrops = state.dropSerializer.eventData.node_drops\n                         .filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n        drops = nodeDrops.map(nodeDrop =>\n            state.dropSerializer.eventData.drops.filter(drop => drop.uid === nodeDrop.uid).shift()\n        );\n\n    return {drops, nodeDrops};\n};\n\nclass DropContainer extends React.Component {\n\n    render() {\n        const makeNodeDropKey = function (nodeDrop) {\n            return '' + nodeDrop.event_uid\n                + '_' + nodeDrop.event_node_uid\n                + '_' + nodeDrop.uid\n                + '_' + nodeDrop.quantity;\n        };\n\n        return <div className={\"drop-container\"}>\n            {this.props.nodeDrops.map((nodeDrop, i) =>\n                this.props.drops[i] && this.props.drops[i].type === \"Bonus Rate-Up\"\n                    ? <DropBonus key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n                    : <Drop key={makeNodeDropKey(nodeDrop)} nodeDrop={nodeDrop}/>\n            )}\n        </div>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropContainer);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\nimport {shiftMessages} from \"../../redux/drop-serializer-actions\";\n\nclass Message extends React.Component {\n    componentDidMount() {\n        window.setTimeout(() => {\n            this.props.dispatch(shiftMessages());\n        }, 5000);\n    }\n\n    render() {\n        return (\n            <Alert variant={this.props.message.type}>{this.props.message.message}</Alert>\n        );\n    }\n}\n\nexport default connect()(Message);\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    let {submissionQueue} = state.dropSerializer,\n        pendingCount = submissionQueue === undefined ? 0 : submissionQueue.length;\n\n    return {pendingCount};\n};\n\nclass PendingSubmissions extends React.Component {\n    render() {\n        if (this.props.pendingCount === 0)\n            return null;\n\n        return (\n            <Alert variant='warning'>{this.props.pendingCount} pending submission(s).</Alert>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(PendingSubmissions);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport Message from \"./Message\";\nimport PendingSubmissions from \"./PendingSubmissions\";\n\nconst mapStateToProps = (state) => {\n    let {messages} = state.dropSerializer;\n\n    if (messages === undefined)\n        messages = [];\n\n    return {messages};\n};\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div className=\"Messages\">\n                <PendingSubmissions />\n                {this.props.messages.map(message =>\n                    <Message key={message.key} message={message} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(Messages);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectEvent} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedEvent: state.dropSerializer.selectedEvent,\n        eventList: state.dropSerializer.eventList\n    };\n};\n\nclass EventSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => this.updateEvent(e)}\n                          value={this.props.selectedEvent}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a event</option>\n                    ].concat(this.props.eventList.map((event, i) =>\n                        <option key={i + 1} value={event.uid}>{event.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateEvent(event) {\n        this.props.dispatch(selectEvent(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(EventSelector);\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {connect} from 'react-redux';\nimport {selectNode} from \"../../redux/thunks/select\";\n\nconst mapStateToProps = (state) => {\n    return {\n        nodeList: state.dropSerializer.eventData.nodes,\n        selectedNode: state.dropSerializer.selectedNode\n    };\n};\n\nclass NodeSelector extends React.Component {\n\n    render() {\n        return (\n            <Form.Control as=\"select\"\n                          className=\"event-selector\"\n                          onChange={e => {\n                              this.updateNode(e)\n                          }}\n                          value={this.props.selectedNode}>\n                {\n                    [\n                        <option key={0} value={\"\"}>Select a node</option>\n                    ].concat(this.props.nodeList.map((node, i) =>\n                        <option key={i + 1} value={node.uid}>{node.name}</option>\n                    ))\n                }\n            </Form.Control>\n        );\n    }\n\n    updateNode(event) {\n        this.props.dispatch(selectNode(event.target.value));\n    }\n\n}\n\nexport default connect(mapStateToProps)(NodeSelector);\n","import {connect as reduxConnect} from \"react-redux\";\nimport {updateSetting} from \"../../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state, ownProps) {\n    let {property} = ownProps,\n        {settings} = state.dropSerializer,\n        value = settings[property];\n\n    return {property, value};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        update: (value) => dispatch(updateSetting(\n            ownProps.property,\n            value\n        ))\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingPlayClick\">\n            <Form.Label>Play Click</Form.Label>\n            <Form.Control as=\"select\" value={value ? \"Yes\" : \"No\"}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingNumberOfColumns\">\n            <Form.Label>Number of Columns</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value}\n                          onChange={e => update(e.target.value)}>\n                <option value=\"columns_auto\">Auto</option>\n                <option value=\"columns_2\">2</option>\n                <option value=\"columns_4\">4</option>\n                <option value=\"columns_6\">6</option>\n                <option value=\"columns_8\">8</option>\n                <option value=\"columns_12\">12</option>\n                <option value=\"columns_16\">16</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingSubmitterName\">\n            <Form.Label>Submitter Name</Form.Label>\n            <Form.Control value={value} onChange={e => update(e.target.value)}/>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingVibrate\">\n            <Form.Label>Vibrate</Form.Label>\n            <Form.Control as=\"select\"\n                          value={value ? \"Yes\" : \"No\"}\n                          disabled={!window.navigator.vibrate}\n                          onChange={e => update(e.target.value === \"Yes\")}>\n                <option>Yes</option>\n                <option>No</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppWidth\">\n            <Form.Label>App Width</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                <option value=\"width_full\">Full Width</option>\n                <option value=\"width_480\">480px</option>\n                <option value=\"width_720\">720px</option>\n                <option value=\"width_1080\">1080p</option>\n                <option value=\"width_1200\">1200p</option>\n                <option value=\"width_1440\">1440p</option>\n                <option value=\"width_2160\">2160p</option>\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport _SettingFieldReduxConnector from \"./_SettingFieldReduxConnector\";\n\nconst BOOTSWATCH_THEMES = [\n    'default',\n    'cerulean',\n    'cosmo',\n    'cyborg',\n    'darkly',\n    'flatly',\n    'journal',\n    'litera',\n    'lumen',\n    'lux',\n    'materia',\n    'minty',\n    'pulse',\n    'sandstone',\n    'simplex',\n    'sketchy',\n    'slate',\n    'solar',\n    'spacelab',\n    'superhero',\n    'united',\n    'yeti',\n]\n\nexport default _SettingFieldReduxConnector.connect(function ({property, value, update}) {\n    return (\n        <Form.Group controlId=\"settingAppTheme\">\n            <Form.Label>Theme</Form.Label>\n            <Form.Control as=\"select\" value={value} onChange={e => update(e.target.value)}>\n                {BOOTSWATCH_THEMES.map(theme => (\n                    <option key={theme} value={`theme_${theme}`}>{theme}</option>\n                ))}\n            </Form.Control>\n        </Form.Group>\n    )\n});\n","import {connect as reduxConnect} from \"react-redux\";\nimport {setShowSettings} from \"../../redux/drop-serializer-actions\";\n\nfunction mapStateToProps(state) {\n    let {showSettings} = state.dropSerializer;\n\n    return {showSettings};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        hide: () => dispatch(setShowSettings(false)),\n        show: () => dispatch(setShowSettings(true)),\n        toggle: () => dispatch((dispatch, getState) => {\n            let {showSettings} = getState().dropSerializer;\n\n            return dispatch(setShowSettings(!showSettings));\n        })\n    };\n}\n\nconst connect = reduxConnect(mapStateToProps, mapDispatchToProps);\n\nexport default {connect, mapDispatchToProps, mapStateToProps};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Click from \"./Field/Click\";\nimport Columns from \"./Field/Columns\";\nimport SubmitterName from \"./Field/SubmitterName\";\nimport Vibrate from \"./Field/Vibrate\";\nimport Width from \"./Field/Width\";\nimport Theme from \"./Field/Theme\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Modal show={showSettings} onHide={e => hide()}>\n            <Modal.Header closeButton>\n                <Modal.Title>Settings</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SubmitterName property={'submitter_name'} />\n                <Width property={'width'} />\n                <Columns property={'columns'} />\n                <Theme property={'theme'} />\n                <Click property={'click'} />\n                <Vibrate property={'vibrate'} />\n            </Modal.Body>\n        </Modal>\n    )\n});\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome/index\";\nimport _SettingsReduxConnector from \"./_SettingsReduxConnector\";\n\nexport default _SettingsReduxConnector.connect(function ({showSettings, show, hide}) {\n    return (\n        <Button variant=\"outline-danger\" className=\"settings\" onClick={e => show(e)}>\n            <FontAwesomeIcon icon=\"cog\"/>\n        </Button>\n    )\n});\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {setShowUpload} from \"../../redux/drop-serializer-actions\";\nimport {Button} from \"react-bootstrap\";\n\nconst mapStateToProps = (state) => {\n    const {eventData, eventList, selectedNode, showUpload} = state.dropSerializer,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        parsable = eventLoaded ? eventData.parsable : false;\n\n    return {eventLoaded, parsable, selectedNode, showUpload};\n};\n\nclass UploadButton extends React.Component {\n    toggle() {\n        this.props.dispatch(setShowUpload(!this.props.showUpload));\n    }\n\n    render() {\n        if (!this.props.eventLoaded || !this.props.parsable || !this.props.selectedNode) {\n            return null;\n        }\n\n        return (\n            <a href=\"Upload drop screenshots\"\n            onClick={event => {\n                    event.preventDefault();\n                    this.toggle();\n                }}>\n                <Button variant=\"outline-info\">\n                    Upload drop screenshots&nbsp;&nbsp;\n                    <FontAwesomeIcon icon=\"file-upload\"/>\n                </Button>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(UploadButton);\n","import axios from \"axios\";\nimport React from \"react\";\nimport {Alert, Button, ButtonGroup, ProgressBar} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport {connect} from \"react-redux\";\nimport {setShowUpload} from \"../../redux/drop-serializer-actions\";\n\nconst mapStateToProps = (state) => {\n    const {domain, selectedEvent, selectedNode, settings, showUpload, eventList, eventData} = state.dropSerializer;\n    const selectedEventName = (eventList ?? []).find(e => e.uid === selectedEvent)?.name ?? \"\";\n    const selectedNodeName = eventData?.nodes.find(n => n.uid === selectedNode)?.name ?? \"\";\n\n    return {\n        domain,\n        selectedEvent,\n        selectedEventName,\n        selectedNode,\n        selectedNodeName,\n        show: showUpload,\n        submitter: settings.submitter_name\n    };\n};\n\nclass UploadModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            downloading: false,\n            type: \"simple\",\n            files: [],\n        };\n    }\n\n    addFiles(files) {\n        const _files = this.state.files.slice();\n\n        for (let i = 0; i < files.length; i++) {\n            _files.push({\n                file: files[i],\n                completed: false,\n                failed: false,\n                progress: 0,\n            });\n        }\n\n        this.setState({\n            files: _files\n        });\n    }\n\n    async download() {\n        await this.setState({downloading: true});\n\n        let active = 0;\n\n        for (let i = 0; i < this.state.files.length; i++) {\n            const file = this.state.files[i];\n\n            if (file.completed)\n                continue;\n\n            active++;\n            this.downloadFile(i, file).then(() => {\n                active--;\n            });\n\n            while (active >= 5) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n        }\n\n        while (active > 0) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        await this.setState({downloading: false});\n    }\n\n    async downloadFile(i, file) {\n        const endpoint = this.props.domain + '/submit/screenshot';\n\n        let files = [...this.state.files];\n\n        files[i].failed = false;\n        files[i].progress = 0;\n        await this.setState({files});\n\n        try {\n            const data = new FormData();\n            data.append('event_uid', this.props.selectedEvent);\n            data.append('event_node_uid', this.props.selectedNode);\n            data.append('submitter', this.props.submitter);\n            data.append('type', this.state.type);\n            data.append('files[]', file.file);\n\n            await axios.post(endpoint, data, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                onUploadProgress: (progressEvent) => {\n                    files = [...this.state.files];\n\n                    files[i].progress = progressEvent.loaded / progressEvent.total * 100;\n                    this.setState({files});\n                }\n            });\n\n            files = [...this.state.files];\n            files[i].completed = true;\n            await this.setState({files});\n        } catch (e) {\n            files = [...this.state.files];\n            files[i].failed = true;\n            await this.setState({files});\n        }\n\n        return true;\n    }\n\n    readyToUpload() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => file.failed).length === 0\n            && this.state.files.filter(file => !file.completed && !file.failed).length > 0;\n    }\n\n    readyToRetry() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => file.failed).length > 0;\n    }\n\n    isComplete() {\n        return !this.state.downloading\n            && this.state.files.length > 0\n            && this.state.files.filter(file => !file.completed).length === 0;\n    }\n\n    reset() {\n        this.setState({files: []});\n    }\n\n    hide() {\n        if (this.state.downloading)\n            return;\n\n        this.props.dispatch(setShowUpload(false));\n        this.reset();\n    }\n\n    render() {\n        const isEvent = /^\\d+$/.test(this.props.selectedEvent);\n        return (\n            <Modal show={this.props.show} onHide={() => this.hide()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {!this.state.downloading ? (\n                        <Form>\n                            {!this.state.files.length ? (\n                                <div>\n                                    <Alert variant=\"info\">\n                                        Uploading to {isEvent ? \"event\" : \"\"} <b>{this.props.selectedEventName}</b>{\" \"}\n                                        node <b>{this.props.selectedNodeName}</b>{\" \"}\n                                        as <b>{this.props.submitter}</b>\n                                    </Alert>\n                                    <Form.Group>\n                                        <Form.Label>Type</Form.Label>\n                                        <Form.Control as=\"select\"\n                                                      value={this.state.type}\n                                                      onChange={event => {\n                                                          this.setState({type: event.target.value});\n                                                      }}>\n                                            <option value={\"simple\"}>Simple</option>\n                                            <option value={\"full\"}>Full</option>\n                                        </Form.Control>\n                                        <Form.Text>\n                                            <ul>\n                                                <li>Simple: Only first screen. Currency + QP + Exp are ignored</li>\n                                                <li>Full: All drop screens are required for submission to be successful</li>\n                                            </ul>\n                                        </Form.Text>\n                                    </Form.Group>\n                                    <Form.Group>\n                                        <Form.Label>Files</Form.Label>\n                                        <div className=\"custom-file\">\n                                            <input type=\"file\"\n                                                   className=\"custom-file-input\"\n                                                   accept=\"image/*\"\n                                                   multiple=\"multiple\"\n                                                   onChange={(event) => {\n                                                       this.addFiles(event.target.files);\n                                                   }}/>\n                                            <label className=\"custom-file-label\">Select Files</label>\n                                        </div>\n                                    </Form.Group>\n                                </div>\n                            ) : null}\n                            {this.readyToUpload() ? (\n                                <Form.Group>\n                                    <ButtonGroup className=\"btn-block\">\n                                        <Button variant=\"danger\" onClick={() => this.reset()}>Reset</Button>\n                                        <Button onClick={() => this.download()}>Upload All</Button>\n                                    </ButtonGroup>\n                                </Form.Group>\n                            ) : null}\n\n                            {this.readyToRetry() ? (\n                                <Form.Group>\n                                    <ButtonGroup className=\"btn-block\">\n                                        <Button variant=\"danger\" onClick={() => this.reset()}>Reset</Button>\n                                        <Button onClick={() => this.download()}>Retry Failed</Button>\n                                    </ButtonGroup>\n                                </Form.Group>\n                            ) : null}\n\n                            {this.isComplete() ? (\n                                <div>\n                                    <p>All Complete</p>\n                                    <Button block variant=\"success\" onClick={() => this.reset()}>New\n                                        Uploads</Button>\n                                </div>\n                            ) : null}\n                        </Form>\n                    ) : null}\n\n                    {this.state.files.map((file, i) => {\n                        return file.completed ? null : (\n                            <div key={i}>\n                                <h5>{file.file.name}</h5>\n                                {this.state.downloading && !file.failed ? (\n                                    <ProgressBar animated striped now={file.progress}/>\n                                ) : null}\n                                {file.failed ? (\n                                    <p className='text-danger'>Failed</p>\n                                ) : null}\n                                <br/>\n                            </div>\n                        );\n                    })}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(UploadModal);\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {Col, Row, Button} from \"react-bootstrap\";\nimport {connect} from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport {init} from '../redux/thunks/load';\nimport \"../sass/drop-serializer.scss\";\nimport SheetButton from \"./Button/SheetButton\";\nimport SubmitButton from \"./Button/SubmitButton\";\nimport ToggleFilterButton from \"./Button/ToggleFilterButton\";\nimport DropContainer from \"./Drop/DropContainer\";\nimport Messages from \"./Message/Messages\";\nimport EventSelector from \"./Selector/EventSelector\";\nimport NodeSelector from \"./Selector/NodeSelector\";\nimport Settings from \"./Setting/SettingsModal\";\nimport ToggleSettingButton from \"./Setting/ToggleSettingsButton\";\nimport UploadButton from \"./Upload/UploadButton\";\nimport UploadModal from \"./Upload/UploadModal\";\n\nconst mapStateToProps = (state, ownProps) => {\n    const {eventData, eventList, isLoading, selectedEvent, selectedNode, settings} = state.dropSerializer,\n        {options} = ownProps,\n        eventsLoaded = eventList && eventList.length > 0,\n        eventLoaded = eventsLoaded && Boolean(eventData),\n        nodeSelected = !isLoading && eventLoaded && Boolean(selectedEvent) && Boolean(selectedNode);\n\n    return {eventsLoaded, eventLoaded, isLoading, nodeSelected, options, settings};\n};\n\nclass DropSerializer extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(init(this.props.options));\n    }\n\n    render() {\n        const theme = (this.props.settings.theme ?? \"theme_default\").replace(\"theme_\", \"\");\n        return <HelmetProvider>\n        <Helmet>\n            {theme === \"default\" ? null : (\n                <link\n                    key=\"theme\"\n                    rel=\"stylesheet\"\n                    href={`https://cdn.jsdelivr.net/npm/bootswatch@4.6.0/dist/${theme}/bootstrap.min.css`}/>\n            )}\n        </Helmet>\n        <div id={\"drop-serializer\"} className={this.props.settings.width}>\n            <div className=\"title\">\n                <Row>\n                <Col md={12} lg={6}>\n                    <h1>\n                        Drop Serializer\n                        <small> by <a href=\"https://discord.gg/TKJmuCR\">Atlas Academy</a></small>\n                    </h1>\n                </Col>\n\n                <Col md={12} lg={6}>\n                    <div className=\"links\">\n                        <UploadButton/>\n                        <SheetButton/>\n                        <a href=\"https://github.com/atlasacademy/drop-serializer-react\"\n                        className=\"text-secondary\"\n                        target=\"_blank\" rel=\"noopener noreferrer author\">\n                            <Button variant=\"outline-secondary\">\n                                <FontAwesomeIcon icon={['fab', 'github']}/>\n                            </Button>\n                        </a>\n                        <a href=\"https://discord.gg/TKJmuCR\"\n                        className=\"text-secondary\"\n                        target=\"_blank\" rel=\"noopener noreferrer author\">\n                            <Button variant=\"outline-secondary\">\n                                <FontAwesomeIcon icon={['fab', 'discord']}/>\n                            </Button>\n                        </a>\n                        <ToggleSettingButton/>\n                    </div>\n                </Col>\n                </Row>\n            </div>\n            {this.props.eventsLoaded && <EventSelector/>}\n            {this.props.eventLoaded && <NodeSelector/>}\n            {this.props.nodeSelected &&\n            <div>\n                <DropContainer/>\n                <Row>\n                    <Col>\n                        <ToggleFilterButton/>\n                    </Col>\n                    <Col>\n                        <SubmitButton/>\n                    </Col>\n                </Row>\n            </div>\n            }\n            <Settings/>\n            <UploadModal/>\n            {this.props.isLoading && <div className=\"loading\">\n                <div className=\"loading-content\">\n                    <FontAwesomeIcon icon=\"spinner\" spin/>\n                </div>\n            </div>}\n            <Messages/>\n        </div>\n        </HelmetProvider>;\n    }\n\n}\n\nexport default connect(mapStateToProps)(DropSerializer);\n","import {\n    INIT_STATE,\n    LOAD_SESSION,\n    LOAD_SETTINGS,\n    LOAD_SUBMISSION_QUEUE,\n    PUSH_MESSAGE,\n    QUEUE_SUBMISSION,\n    RESET_SUBMISSION,\n    SELECT_EVENT,\n    SELECT_NODE,\n    SET_EVENT_DATA,\n    SET_EVENT_LIST,\n    SET_SHOW_FILTERS,\n    SET_SHOW_SETTINGS,\n    SET_SHOW_UPLOAD,\n    SET_SUBMISSION_PENDING,\n    SHIFT_MESSAGES,\n    SHIFT_SUBMISSIONS,\n    UPDATE_DROP,\n    UPDATE_LOADING,\n    UPDATE_SETTING\n} from \"./drop-serializer-actions\";\n\nexport default function dropSerializerReducer(state, action) {\n    switch (action.type) {\n        case INIT_STATE:\n            return {...state, ...action.payload};\n        case LOAD_SESSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                json = window.localStorage.getItem(storageKey),\n                submissionDrops = json === null ? [] : JSON.parse(json);\n\n            if (!selectedEvent || !selectedNode)\n                submissionDrops = [];\n\n            return {...state, submissionDrops};\n        }\n        case LOAD_SETTINGS: {\n            let defaultSettings = {\n                    submitter_name: \"\",\n                    click: true,\n                    columns: \"columns_auto\",\n                    vibrate: true,\n                    width: \"width_full\",\n                    theme: \"theme_default\",\n                },\n                json = window.localStorage.getItem('settings'),\n                storedSettings = json === null ? [] : JSON.parse(json),\n                settings = {...defaultSettings, ...storedSettings};\n\n            return {...state, settings};\n        }\n        case LOAD_SUBMISSION_QUEUE: {\n            let json = window.localStorage.getItem(\"submissions\"),\n                submissionQueue = json === null ? [] : JSON.parse(json);\n\n            return {...state, submissionQueue};\n        }\n        case QUEUE_SUBMISSION: {\n            let submission = action.payload,\n                {submissionQueue} = state;\n\n            submissionQueue.push(submission);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case PUSH_MESSAGE: {\n            let messageKey = state.messageKey,\n                oldMessages = state.messages,\n                message = {...action.payload, key: messageKey++},\n                messages = [...oldMessages, message];\n\n            return {...state, messageKey, messages};\n        }\n        case RESET_SUBMISSION: {\n            let {selectedEvent, selectedNode} = state,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                drops = state.eventData.drops,\n                submissionDrops = state.submissionDrops.map(submissionDrop => {\n                    let drop = drops.filter(drop => drop.uid === submissionDrop.uid).shift();\n\n                    if (drop && drop.type === \"Bonus Rate-Up\")\n                        return submissionDrop;\n\n                    return {...submissionDrop, count: 0};\n                });\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            return {\n                ...state,\n                selectedDropUid: null,\n                selectedDropQuantity: null,\n                selectedDropInitialCount: null,\n                submissionDrops\n            };\n        }\n        case SELECT_EVENT:\n            return {...state, selectedEvent: action.payload, selectedNode: \"\"};\n        case SELECT_NODE:\n            return {...state, selectedNode: action.payload};\n        case SET_EVENT_LIST:\n            return {...state, eventList: action.payload};\n        case SET_EVENT_DATA:\n            return {...state, eventData: action.payload};\n        case SET_SHOW_FILTERS:\n            return {...state, showFilters: action.payload};\n        case SET_SHOW_SETTINGS:\n            return {...state, showSettings: action.payload};\n        case SET_SHOW_UPLOAD:\n            return {...state, showUpload: action.payload};\n        case SET_SUBMISSION_PENDING:\n            return {...state, submissionPending: action.payload};\n        case SHIFT_MESSAGES: {\n            let messages = state.messages.slice(1);\n\n            return {...state, messages};\n        }\n        case SHIFT_SUBMISSIONS: {\n            let submissionQueue = state.submissionQueue.slice(1);\n\n            window.localStorage.setItem(\"submissions\", JSON.stringify(submissionQueue));\n\n            return {...state, submissionQueue};\n        }\n        case UPDATE_DROP: {\n            let {selectedEvent, selectedNode} = state,\n                {uid, quantity, count, ignored} = action.payload,\n                storageKey = '' + selectedEvent + '_' + selectedNode,\n                nodeDrops = state.eventData.node_drops.filter(nodeDrop => nodeDrop.event_node_uid === selectedNode),\n                initialDrop = state.submissionDrops.filter(submissionDrop =>\n                    submissionDrop.uid === uid\n                    && submissionDrop.quantity === quantity\n                ).shift(),\n                submissionDrops = nodeDrops.map(nodeDrop => {\n                    let submissionDrop = state.submissionDrops.filter(submissionDrop =>\n                        submissionDrop.uid === nodeDrop.uid\n                        && submissionDrop.quantity === nodeDrop.quantity\n                    ).shift();\n\n                    if (submissionDrop === undefined)\n                        submissionDrop = {\n                            uid: nodeDrop.uid,\n                            quantity: nodeDrop.quantity,\n                            count: 0,\n                            ignored: false\n                        };\n\n                    if (submissionDrop.uid === uid && submissionDrop.quantity === quantity)\n                        submissionDrop = {\n                            ...submissionDrop,\n                            count,\n                            ignored\n                        };\n\n                    return submissionDrop;\n                }),\n                newState = {...state, submissionDrops};\n\n            window.localStorage.setItem(storageKey, JSON.stringify(submissionDrops));\n\n            if (state.selectedDropUid !== uid || state.selectedDropQuantity !== quantity) {\n                newState.selectedDropUid = uid;\n                newState.selectedDropQuantity = quantity;\n                newState.selectedDropInitialCount = initialDrop ? initialDrop.count : 0;\n            }\n\n            return newState;\n        }\n        case UPDATE_LOADING:\n            return {...state, isLoading: action.payload};\n        case UPDATE_SETTING: {\n            let newState = {...state},\n                newSettings = {...newState.settings};\n\n            newSettings[action.payload.property] = action.payload.value;\n            newState.settings = newSettings;\n            window.localStorage.setItem(\"settings\", JSON.stringify(newSettings));\n\n            return newState;\n        }\n        default: {\n            if (state === undefined)\n                return {\n                    settings: {}\n                };\n\n            return state;\n        }\n    }\n}\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware} from \"redux\";\nimport {createStore} from \"redux-dynamic-modules-core\";\nimport {DynamicModuleLoader} from \"redux-dynamic-modules-react\";\nimport thunkMiddleware from 'redux-thunk';\nimport DropSerializer from \"./components/DropSerializer\";\nimport getDropSerializerModule from \"./redux/drop-serializer-module\";\nimport \"./sass/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.store = createStore(\n            {},\n            [\n                applyMiddleware(thunkMiddleware)\n            ]\n        );\n    }\n\n    render() {\n        return <div id={\"app\"}>\n            <Provider store={this.store}>\n                <DynamicModuleLoader modules={[getDropSerializerModule()]}>\n                    <DropSerializer options={{\n                        domain: \"https://submissions.atlasacademy.io\",\n                        enableEventSelector: true\n                    }}/>\n                </DynamicModuleLoader>\n            </Provider>\n        </div>;\n    }\n}\n\nexport default App;\n","import dropSerializerReducer from './drop-serializer-reducer';\n\nexport default function getDropSerializerModule() {\n    return {\n        // Unique id of the module\n        id: \"drop-serializer\",\n        // Maps the Store key to the reducer\n        reducerMap: {\n            dropSerializer: dropSerializerReducer,\n        }\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n    faBan,\n    faCheck,\n    faCog,\n    faCopy,\n    faFileExcel,\n    faFileUpload,\n    faFilter,\n    faMinus,\n    faSpinner,\n    faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faBan);\nlibrary.add(faCheck);\nlibrary.add(faCog);\nlibrary.add(faCopy);\nlibrary.add(faFileExcel);\nlibrary.add(faFileUpload);\nlibrary.add(faFilter);\nlibrary.add(faMinus);\nlibrary.add(faSpinner);\nlibrary.add(faTrashAlt);\nlibrary.add(faDiscord);\nlibrary.add(faGithub);\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}